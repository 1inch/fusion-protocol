{
  "address": "0x6b0905BAe84443A7DACEfA910a64DCA811Cbf453",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "contract St1inch",
          "name": "st1inch",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefaultFarmTokenMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotRegisteredDelegatee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferDisabled",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "defaultFarm",
          "type": "address"
        }
      ],
      "name": "DefaultFarmSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "RegisterDelegatee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "defaultFarms",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegated",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "origin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxUserFarms",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "contract IDelegatedShare",
          "name": "shareToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registration",
      "outputs": [
        {
          "internalType": "contract IDelegatedShare",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "farm",
          "type": "address"
        }
      ],
      "name": "setDefaultFarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "votingPowerOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ddfc46f961ea51d0527e87b4ba5920fa79ca1f11d71d281ad6daa523b89b83d",
  "receipt": {
    "to": null,
    "from": "0x7c38A7A466f82863BE4e35A5854Ffb6079ff1A40",
    "contractAddress": "0x6b0905BAe84443A7DACEfA910a64DCA811Cbf453",
    "transactionIndex": 71,
    "gasUsed": "3511355",
    "logsBloom": "0x
    "blockHash": "0xb44d600462ae8f828a023b4c1d8abbf1ef49becf457c5598eca3fe4a14f7b6f0",
    "transactionHash": "0x8ddfc46f961ea51d0527e87b4ba5920fa79ca1f11d71d281ad6daa523b89b83d",
    "logs": [],
    "blockNumber": 24037823,
    "cumulativeGasUsed": "12217509",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Rewardable",
    "RWD",
    "0x977E05968Ea1Fe146AafED3e89D72Bd77fD0ba65"
  ],
  "numDeployments": 1,
  "solcInputHash": "681208ab6c77f596f792c0cef49df803",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract St1inch\",\"name\":\"st1inch\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefaultFarmTokenMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRegisteredDelegatee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferDisabled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"defaultFarm\",\"type\":\"address\"}],\"name\":\"DefaultFarmSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"RegisterDelegatee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"defaultFarms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxUserFarms\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"contract IDelegatedShare\",\"name\":\"shareToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registration\",\"outputs\":[{\"internalType\":\"contract IDelegatedShare\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"name\":\"setDefaultFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingPowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"votingPowerOf(address)\":{\"details\":\"we assume that voting power is a function of balance that preserves order\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardableDelegationPodWithVotingPower.sol\":\"RewardableDelegationPodWithVotingPower\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@1inch/delegating/contracts/BasicDelegationPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/interfaces/IERC20Pods.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/Pod.sol\\\";\\n\\nimport \\\"./interfaces/IDelegationPod.sol\\\";\\n\\ncontract BasicDelegationPod is IDelegationPod, Pod, ERC20 {\\n    error ApproveDisabled();\\n    error TransferDisabled();\\n\\n    mapping(address => address) public delegated;\\n\\n    constructor(string memory name_, string memory symbol_, address token)\\n        ERC20(name_, symbol_) Pod(token)\\n    {}  // solhint-disable-line no-empty-blocks\\n\\n    function delegate(address delegatee) public virtual {\\n        address prevDelegatee = delegated[msg.sender];\\n        if (prevDelegatee != delegatee) {\\n            delegated[msg.sender] = delegatee;\\n            emit Delegated(msg.sender, delegatee);\\n            uint256 balance = IERC20Pods(token).podBalanceOf(address(this), msg.sender);\\n            if (balance > 0) {\\n                _updateBalances(msg.sender, msg.sender, prevDelegatee, delegatee, balance);\\n            }\\n        }\\n    }\\n\\n    function updateBalances(address from, address to, uint256 amount) public virtual onlyToken {\\n        _updateBalances(\\n            from,\\n            to,\\n            from == address(0) ? address(0) : delegated[from],\\n            to == address(0) ? address(0) : delegated[to],\\n            amount\\n        );\\n    }\\n\\n    function _updateBalances(address /* from */, address /* to */, address fromDelegatee, address toDelegatee, uint256 amount) internal virtual {\\n        if (fromDelegatee != toDelegatee && amount > 0) {\\n            if (fromDelegatee == address(0)) {\\n                _mint(toDelegatee, amount);\\n            } else if (toDelegatee == address(0)) {\\n                _burn(fromDelegatee, amount);\\n            } else {\\n                _transfer(fromDelegatee, toDelegatee, amount);\\n            }\\n        }\\n    }\\n\\n    // ERC20 overrides\\n\\n    function transfer(address /* to */, uint256 /* amount */) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function transferFrom(address /* from */, address /* to */, uint256 /* amount */) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function approve(address /* spender */, uint256 /* amount */) public pure override(ERC20, IERC20) returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function increaseAllowance(address /* spender */, uint256 /* addedValue */) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function decreaseAllowance(address /* spender */, uint256 /* subtractedValue */) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n}\\n\",\"keccak256\":\"0xb2ce6198b04a848f35f9f929c49ff9aead990fe3d22fd347973f2c0a6cf39737\",\"license\":\"MIT\"},\"@1inch/delegating/contracts/DelegatedShare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/ERC20Pods.sol\\\";\\nimport \\\"./interfaces/IDelegatedShare.sol\\\";\\n\\ncontract DelegatedShare is IDelegatedShare, ERC20Pods, Ownable {\\n    error ApproveDisabled();\\n    error TransferDisabled();\\n\\n    uint256 private constant _POD_CALL_GAS_LIMIT = 100_000;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 maxUserFarms\\n    ) ERC20(name, symbol) ERC20Pods(maxUserFarms, _POD_CALL_GAS_LIMIT) {} // solhint-disable-line no-empty-blocks\\n\\n    function addDefaultFarmIfNeeded(address account, address farm) external onlyOwner {\\n        if (!hasPod(account, farm)) {\\n            _addPod(account, farm);\\n        }\\n    }\\n\\n    function mint(address account, uint256 amount) external onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyOwner {\\n        _burn(account, amount);\\n    }\\n\\n    function approve(address /* spender */, uint256 /* amount */) public pure override(ERC20, IERC20) returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function transfer(address /* to */, uint256 /* amount */) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function transferFrom(address /* from */, address /* to */, uint256 /* amount */) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function increaseAllowance(address /* spender */, uint256 /* addedValue */) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function decreaseAllowance(address /* spender */, uint256 /* subtractedValue */) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n}\\n\",\"keccak256\":\"0x626fda91867f2716c18f2d5c6e285c323b24beea5a38879bf9d4ce3fd7d7e6a7\",\"license\":\"MIT\"},\"@1inch/delegating/contracts/RewardableDelegationPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BasicDelegationPod.sol\\\";\\nimport \\\"./DelegatedShare.sol\\\";\\nimport \\\"./interfaces/IRewardableDelegationPod.sol\\\";\\nimport \\\"./interfaces/IDelegatedShare.sol\\\";\\n\\ncontract RewardableDelegationPod is IRewardableDelegationPod, BasicDelegationPod {\\n    error NotRegisteredDelegatee();\\n    error AlreadyRegistered();\\n    error DefaultFarmTokenMismatch();\\n\\n    mapping(address => IDelegatedShare) public registration;\\n    mapping(address => address) public defaultFarms;\\n\\n    modifier onlyRegistered {\\n        if (address(registration[msg.sender]) == address(0)) revert NotRegisteredDelegatee();\\n        _;\\n    }\\n\\n    modifier onlyNotRegistered {\\n        if (address(registration[msg.sender]) != address(0)) revert AlreadyRegistered();\\n        _;\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(string memory name_, string memory symbol_, address token) BasicDelegationPod(name_, symbol_, token) {}\\n\\n    function delegate(address delegatee) public override(IDelegationPod, BasicDelegationPod) {\\n        IDelegatedShare delegatedShare = registration[delegatee];\\n        if (delegatee != address(0) && delegatedShare == IDelegatedShare(address(0))) revert NotRegisteredDelegatee();\\n        super.delegate(delegatee);\\n        if (defaultFarms[delegatee] != address(0)) {\\n            delegatedShare.addDefaultFarmIfNeeded(msg.sender, defaultFarms[delegatee]);\\n        }\\n    }\\n\\n    function register(string memory name, string memory symbol, uint256 maxUserFarms)\\n        external onlyNotRegistered returns(IDelegatedShare shareToken)\\n    {\\n        shareToken = new DelegatedShare(name, symbol, maxUserFarms);\\n        registration[msg.sender] = IDelegatedShare(shareToken);\\n        emit RegisterDelegatee(msg.sender);\\n    }\\n\\n    function setDefaultFarm(address farm) external onlyRegistered {\\n        if (farm != address(0) && Pod(farm).token() != address(registration[msg.sender])) revert DefaultFarmTokenMismatch();\\n        defaultFarms[msg.sender] = farm;\\n        emit DefaultFarmSet(farm);\\n    }\\n\\n    function _updateBalances(address from, address to, address fromDelegatee, address toDelegatee, uint256 amount) internal virtual override {\\n        super._updateBalances(from, to, fromDelegatee, toDelegatee, amount);\\n\\n        if (fromDelegatee != address(0)) {\\n            registration[fromDelegatee].burn(from, amount);\\n        }\\n        if (toDelegatee != address(0)) {\\n            registration[toDelegatee].mint(to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39837c963912d59b07997bcd7e7fb5c8ad5474d350e4fc390cc0fbc033a6f15a\",\"license\":\"MIT\"},\"@1inch/delegating/contracts/interfaces/IDelegatedShare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDelegatedShare is IERC20 {\\n    function addDefaultFarmIfNeeded(address account, address farm) external; // onlyOwner\\n    function mint(address account, uint256 amount) external; // onlyOwner\\n    function burn(address account, uint256 amount) external; // onlyOwner\\n}\\n\",\"keccak256\":\"0x6063b98e988d64a42a963bb01e2c9d040afae5d44dfcad6c31efbe059ecc4084\",\"license\":\"MIT\"},\"@1inch/delegating/contracts/interfaces/IDelegationPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/interfaces/IPod.sol\\\";\\n\\ninterface IDelegationPod is IPod, IERC20 {\\n    event Delegated(address account, address delegatee);\\n\\n    function delegated(address account) external view returns(address);\\n    function delegate(address delegatee) external;\\n}\\n\",\"keccak256\":\"0x8b02f13ce21132f6943d7892ab10f3f8f697d5f5e36d8bd788b6cdf2154a2c16\",\"license\":\"MIT\"},\"@1inch/delegating/contracts/interfaces/IRewardableDelegationPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDelegationPod.sol\\\";\\nimport \\\"./IDelegatedShare.sol\\\";\\n\\ninterface IRewardableDelegationPod is IDelegationPod {\\n    event DefaultFarmSet(address defaultFarm);\\n    event RegisterDelegatee(address delegatee);\\n\\n    function register(string memory name, string memory symbol, uint256 maxUserFarms) external returns(IDelegatedShare shareToken);\\n    function registration(address account) external returns(IDelegatedShare shareToken);\\n    function setDefaultFarm(address farm) external;\\n}\\n\",\"keccak256\":\"0x60bd1d397a99cfb34003a49beaf11ed603849960a95e954084a45876d7df504d\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/ERC20Pods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/AddressSet.sol\\\";\\n\\nimport \\\"./interfaces/IERC20Pods.sol\\\";\\nimport \\\"./interfaces/IPod.sol\\\";\\nimport \\\"./libs/ReentrancyGuard.sol\\\";\\n\\nabstract contract ERC20Pods is ERC20, IERC20Pods, ReentrancyGuardExt {\\n    using AddressSet for AddressSet.Data;\\n    using AddressArray for AddressArray.Data;\\n    using ReentrancyGuardLib for ReentrancyGuardLib.Data;\\n\\n    error PodAlreadyAdded();\\n    error PodNotFound();\\n    error InvalidPodAddress();\\n    error PodsLimitReachedForAccount();\\n    error InsufficientGas();\\n\\n    uint256 public immutable podsLimit;\\n    uint256 public immutable podCallGasLimit;\\n\\n    ReentrancyGuardLib.Data private _guard;\\n    mapping(address => AddressSet.Data) private _pods;\\n\\n    constructor(uint256 podsLimit_, uint256 podCallGasLimit_) {\\n        podsLimit = podsLimit_;\\n        podCallGasLimit = podCallGasLimit_;\\n        _guard.init();\\n    }\\n    \\n\\n    function hasPod(address account, address pod) public view virtual returns(bool) {\\n        return _pods[account].contains(pod);\\n    }\\n\\n    function podsCount(address account) public view virtual returns(uint256) {\\n        return _pods[account].length();\\n    }\\n\\n    function podAt(address account, uint256 index) public view virtual returns(address) {\\n        return _pods[account].at(index);\\n    }\\n\\n    function pods(address account) public view virtual returns(address[] memory) {\\n        return _pods[account].items.get();\\n    }\\n\\n    function balanceOf(address account) public nonReentrantView(_guard) view override(IERC20, ERC20) virtual returns(uint256) {\\n        return super.balanceOf(account);\\n    }\\n\\n    function podBalanceOf(address pod, address account) public nonReentrantView(_guard) view virtual returns(uint256) {\\n        if (hasPod(account, pod)) {\\n            return super.balanceOf(account);\\n        }\\n        return 0;\\n    }\\n\\n    function addPod(address pod) public virtual {\\n        _addPod(msg.sender, pod);\\n    }\\n\\n    function removePod(address pod) public virtual {\\n        _removePod(msg.sender, pod);\\n    }\\n\\n    function removeAllPods() public virtual {\\n        _removeAllPods(msg.sender);\\n    }\\n\\n    function _addPod(address account, address pod) internal virtual {\\n        if (pod == address(0)) revert InvalidPodAddress();\\n        if (!_pods[account].add(pod)) revert PodAlreadyAdded();\\n        if (_pods[account].length() > podsLimit) revert PodsLimitReachedForAccount();\\n\\n        uint256 balance = balanceOf(account);\\n        if (balance > 0) {\\n            _updateBalances(pod, address(0), account, balance);\\n        }\\n    }\\n\\n    function _removePod(address account, address pod) internal virtual {\\n        if (!_pods[account].remove(pod)) revert PodNotFound();\\n\\n        uint256 balance = balanceOf(account);\\n        if (balance > 0) {\\n            _updateBalances(pod, account, address(0), balance);\\n        }\\n    }\\n\\n    function _removeAllPods(address account) internal virtual {\\n        address[] memory items = _pods[account].items.get();\\n        uint256 balance = balanceOf(account);\\n        unchecked {\\n            for (uint256 i = items.length; i > 0; i--) {\\n                if (balance > 0) {\\n                    _updateBalances(items[i - 1], account, address(0), balance);\\n                }\\n                _pods[account].remove(items[i - 1]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Assembly implementation of the gas limited call to avoid return gas bomb,\\n    // moreover call to a destructed pod would also revert even inside try-catch block in Solidity 0.8.17\\n    /// @dev try IPod(pod).updateBalances{gas: _POD_CALL_GAS_LIMIT}(from, to, amount) {} catch {}\\n    function _updateBalances(address pod, address from, address to, uint256 amount) private {\\n        bytes4 selector = IPod.updateBalances.selector;\\n        bytes4 exception = InsufficientGas.selector;\\n        uint256 gasLimit = podCallGasLimit;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), from)\\n            mstore(add(ptr, 0x24), to)\\n            mstore(add(ptr, 0x44), amount)\\n\\n            if lt(div(mul(gas(), 63), 64), gasLimit) {\\n                mstore(0, exception)\\n                revert(0, 4)\\n            }\\n            pop(call(gasLimit, pod, 0, ptr, 0x64, 0, 0))\\n        }\\n    }\\n\\n    // ERC20 Overrides\\n\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal nonReentrant(_guard) override virtual {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        unchecked {\\n            if (amount > 0 && from != to) {\\n                address[] memory a = _pods[from].items.get();\\n                address[] memory b = _pods[to].items.get();\\n                uint256 aLength = a.length;\\n                uint256 bLength = b.length;\\n\\n                for (uint256 i = 0; i < aLength; i++) {\\n                    address pod = a[i];\\n\\n                    uint256 j;\\n                    for (j = 0; j < bLength; j++) {\\n                        if (pod == b[j]) {\\n                            // Both parties are participating of the same Pod\\n                            _updateBalances(pod, from, to, amount);\\n                            b[j] = address(0);\\n                            break;\\n                        }\\n                    }\\n\\n                    if (j == bLength) {\\n                        // Sender is participating in a Pod, but receiver is not\\n                        _updateBalances(pod, from, address(0), amount);\\n                    }\\n                }\\n\\n                for (uint256 j = 0; j < bLength; j++) {\\n                    address pod = b[j];\\n                    if (pod != address(0)) {\\n                        // Receiver is participating in a Pod, but sender is not\\n                        _updateBalances(pod, address(0), to, amount);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78bf599b1c60f89bb8bbbc13e9b3806b921800e334b9567c95098e441c43fa22\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/Pod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IPod.sol\\\";\\n\\nabstract contract Pod is IPod {\\n    error AccessDenied();\\n\\n    address public immutable token;\\n\\n    modifier onlyToken {\\n        if (msg.sender != token) revert AccessDenied();\\n        _;\\n    }\\n\\n    constructor(address token_) {\\n        token = token_;\\n    }\\n}\\n\",\"keccak256\":\"0x8b19c0a4884cfeed5c798cee6fc01f537b896983e9207fcb1a3173687fe2dd60\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/interfaces/IERC20Pods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Pods is IERC20 {\\n    function hasPod(address account, address pod) external view returns(bool);\\n    function podsCount(address account) external view returns(uint256);\\n    function podAt(address account, uint256 index) external view returns(address);\\n    function pods(address account) external view returns(address[] memory);\\n    function podBalanceOf(address pod, address account) external view returns(uint256);\\n\\n    function addPod(address pod) external;\\n    function removePod(address pod) external;\\n    function removeAllPods() external;\\n}\\n\",\"keccak256\":\"0x46a4407d34b86181a3635a67c3b8aaccb5ed7b95c7ee0444802d050d2f7d920a\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/interfaces/IPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPod {\\n    function updateBalances(address from, address to, uint256 amount) external; // onlyERC20Pods\\n}\\n\",\"keccak256\":\"0xb9c87816587a706f6b6d0b08ab12ea1197d86b3cbe2efa0ce8a8644a72f4d9d7\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/libs/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ReentrancyGuardLib {\\n    error ReentrantCall();\\n\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    struct Data {\\n        uint256 _status;\\n    }\\n\\n    function init(Data storage self) internal {\\n        self._status = _NOT_ENTERED;\\n    }\\n\\n    function enter(Data storage self) internal {\\n        if (self._status == _ENTERED) revert ReentrantCall();\\n        self._status = _ENTERED;\\n    }\\n\\n    function exit(Data storage self) internal {\\n        self._status = _NOT_ENTERED;\\n    }\\n\\n    function check(Data storage self) internal view returns (bool) {\\n        return self._status == _ENTERED;\\n    }\\n}\\n\\ncontract ReentrancyGuardExt {\\n    using ReentrancyGuardLib for ReentrancyGuardLib.Data;\\n\\n    modifier nonReentrant(ReentrancyGuardLib.Data storage self) {\\n        self.enter();\\n        _;\\n        self.exit();\\n    }\\n\\n    modifier nonReentrantView(ReentrancyGuardLib.Data storage self) {\\n        if (self.check()) revert ReentrancyGuardLib.ReentrantCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5b01eb0f7bcbf97f72b2192adebea04530b2aba0a6f3b445be58caed99ef2670\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10105446e709abf11b13721a516ffa24d3c5bec39c7925a367968a6a7519579f\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/AddressArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\n/// @title Library that implements address array on mapping, stores array length at 0 index.\\nlibrary AddressArray {\\n    error IndexOutOfBounds();\\n    error PopFromEmptyArray();\\n    error OutputArrayTooSmall();\\n\\n    /// @dev Data struct containing raw mapping.\\n    struct Data {\\n        mapping(uint256 => uint256) _raw;\\n    }\\n\\n    /// @dev Length of array.\\n    function length(Data storage self) internal view returns (uint256) {\\n        return self._raw[0] >> 160;\\n    }\\n\\n    /// @dev Returns data item from `self` storage at `i`.\\n    function at(Data storage self, uint256 i) internal view returns (address) {\\n        return address(uint160(self._raw[i]));\\n    }\\n\\n    /// @dev Returns list of addresses from storage `self`.\\n    function get(Data storage self) internal view returns (address[] memory arr) {\\n        uint256 lengthAndFirst = self._raw[0];\\n        arr = new address[](lengthAndFirst >> 160);\\n        _get(self, arr, lengthAndFirst);\\n    }\\n\\n    /// @dev Puts list of addresses from `self` storage into `output` array.\\n    function get(Data storage self, address[] memory output) internal view returns (address[] memory) {\\n        return _get(self, output, self._raw[0]);\\n    }\\n\\n    function _get(\\n        Data storage self,\\n        address[] memory output,\\n        uint256 lengthAndFirst\\n    ) private view returns (address[] memory) {\\n        uint256 len = lengthAndFirst >> 160;\\n        if (len > output.length) revert OutputArrayTooSmall();\\n        if (len > 0) {\\n            output[0] = address(uint160(lengthAndFirst));\\n            unchecked {\\n                for (uint256 i = 1; i < len; i++) {\\n                    output[i] = address(uint160(self._raw[i]));\\n                }\\n            }\\n        }\\n        return output;\\n    }\\n\\n    /// @dev Array push back `account` operation on storage `self`.\\n    function push(Data storage self, address account) internal returns (uint256) {\\n        unchecked {\\n            uint256 lengthAndFirst = self._raw[0];\\n            uint256 len = lengthAndFirst >> 160;\\n            if (len == 0) {\\n                self._raw[0] = (1 << 160) + uint160(account);\\n            } else {\\n                self._raw[0] = lengthAndFirst + (1 << 160);\\n                self._raw[len] = uint160(account);\\n            }\\n            return len + 1;\\n        }\\n    }\\n\\n    /// @dev Array pop back operation for storage `self`.\\n    function pop(Data storage self) internal {\\n        unchecked {\\n            uint256 lengthAndFirst = self._raw[0];\\n            uint256 len = lengthAndFirst >> 160;\\n            if (len == 0) revert PopFromEmptyArray();\\n            self._raw[len - 1] = 0;\\n            if (len > 1) {\\n                self._raw[0] = lengthAndFirst - (1 << 160);\\n            }\\n        }\\n    }\\n\\n    /// @dev Set element for storage `self` at `index` to `account`.\\n    function set(\\n        Data storage self,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        uint256 len = length(self);\\n        if (index >= len) revert IndexOutOfBounds();\\n\\n        if (index == 0) {\\n            self._raw[0] = (len << 160) | uint160(account);\\n        } else {\\n            self._raw[index] = uint160(account);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x721a3cbb8590214dc6cf6cacaabdb7b78b0e2de93cf308230eea800b546b2bff\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"./AddressArray.sol\\\";\\n\\n/** @title Library that is using AddressArray library for AddressArray.Data\\n * and allows Set operations on address storage data:\\n * 1. add\\n * 2. remove\\n * 3. contains\\n */\\nlibrary AddressSet {\\n    using AddressArray for AddressArray.Data;\\n\\n    /** @dev Data struct from AddressArray.Data items\\n     * and lookup mapping address => index in data array.\\n     */\\n    struct Data {\\n        AddressArray.Data items;\\n        mapping(address => uint256) lookup;\\n    }\\n\\n    /// @dev Length of data storage.\\n    function length(Data storage s) internal view returns (uint256) {\\n        return s.items.length();\\n    }\\n\\n    /// @dev Returns data item from `s` storage at `index`.\\n    function at(Data storage s, uint256 index) internal view returns (address) {\\n        return s.items.at(index);\\n    }\\n\\n    /// @dev Returns true if storage `s` has `item`.\\n    function contains(Data storage s, address item) internal view returns (bool) {\\n        return s.lookup[item] != 0;\\n    }\\n\\n    /// @dev Adds `item` into storage `s` and returns true if successful.\\n    function add(Data storage s, address item) internal returns (bool) {\\n        if (s.lookup[item] > 0) {\\n            return false;\\n        }\\n        s.lookup[item] = s.items.push(item);\\n        return true;\\n    }\\n\\n    /// @dev Removes `item` from storage `s` and returns true if successful.\\n    function remove(Data storage s, address item) internal returns (bool) {\\n        uint256 index = s.lookup[item];\\n        if (index == 0) {\\n            return false;\\n        }\\n        if (index < s.items.length()) {\\n            unchecked {\\n                address lastItem = s.items.at(s.items.length() - 1);\\n                s.items.set(index - 1, lastItem);\\n                s.lookup[lastItem] = index;\\n            }\\n        }\\n        s.items.pop();\\n        delete s.lookup[item];\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x06af71720083e9d8d3e7b9994695f6867e676a4fa89f1a8c294f5fce32b2da12\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x990c989e0ffba370a27b90b917a1cf86db79e370b9ba2b0f9076895b232744f8\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/// @title Implements efficient safe methods for ERC20 interface.\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /// @dev If `approve(from, to, amount)` fails, try to `approve(from, to, 0)` before retry.\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev Allowance increase with safe math check.\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /// @dev Allowance decrease with safe math check.\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    /// @dev Calls either ERC20 or Dai `permit` for `token`, if unsuccessful forwards revert from external call.\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool) {\\n        if (permit.length == 32 * 7) {\\n            return _makeCalldataCall(token, IERC20Permit.permit.selector, permit);\\n        }\\n        if (permit.length == 32 * 8) {\\n            return _makeCalldataCall(token, IDaiLikePermit.permit.selector, permit);\\n        }\\n        revert SafePermitBadLength();\\n    }\\n\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function _makeCalldataCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        bytes calldata args\\n    ) private returns (bool success) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let len := add(4, args.length)\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            calldatacopy(add(data, 0x04), args.offset, args.length)\\n            success := call(gas(), token, 0, data, len, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x11014aec6238c642e58667a3ace2bb16a165bfe7bb475047c971bafdb1da92d0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/RewardableDelegationPodWithVotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@1inch/delegating/contracts/RewardableDelegationPod.sol\\\";\\nimport \\\"./helpers/VotingPowerCalculator.sol\\\";\\nimport \\\"./interfaces/IVotable.sol\\\";\\nimport \\\"./St1inch.sol\\\";\\n\\ncontract RewardableDelegationPodWithVotingPower is RewardableDelegationPod, VotingPowerCalculator, IVotable {\\n    constructor(string memory name_, string memory symbol_, St1inch st1inch)\\n        RewardableDelegationPod(name_, symbol_, address(st1inch))\\n        VotingPowerCalculator(st1inch.expBase(), st1inch.origin())\\n    {}\\n\\n    function votingPowerOf(address account) external view virtual returns (uint256) {\\n        return _votingPowerAt(balanceOf(account), block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x1dc83e97bcf320a71b2f7e18ad7fbc822fa37ee84a10877dd7e29e147756315b\",\"license\":\"MIT\"},\"contracts/St1inch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/ERC20Pods.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/Pod.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\\\";\\nimport \\\"./helpers/VotingPowerCalculator.sol\\\";\\nimport \\\"./interfaces/IVotable.sol\\\";\\n\\ncontract St1inch is ERC20Pods, Ownable, VotingPowerCalculator, IVotable {\\n    using SafeERC20 for IERC20;\\n\\n    event EmergencyExitSet(bool status);\\n    event MaxLossRatioSet(uint256 ratio);\\n    event FeeReceiverSet(address receiver);\\n    event DefaultFarmSet(address defaultFarm);\\n\\n    error ApproveDisabled();\\n    error TransferDisabled();\\n    error LockTimeMoreMaxLock();\\n    error LockTimeLessMinLock();\\n    error UnlockTimeHasNotCome();\\n    error StakeUnlocked();\\n    error MinReturnIsNotMet();\\n    error MaxLossIsNotMet();\\n    error MaxLossOverflow();\\n    error LossIsTooBig();\\n    error RescueAmountIsTooLarge();\\n    error ExpBaseTooBig();\\n    error ExpBaseTooSmall();\\n    error DefaultFarmTokenMismatch();\\n\\n    uint256 public constant MIN_LOCK_PERIOD = 30 days;\\n    uint256 public constant MAX_LOCK_PERIOD = 2 * 365 days;\\n    uint256 private constant _VOTING_POWER_DIVIDER = 20;\\n    uint256 private constant _POD_CALL_GAS_LIMIT = 200_000;\\n    uint256 private constant _ONE = 1e9;\\n\\n    IERC20 public immutable oneInch;\\n\\n    struct Depositor {\\n        uint40 unlockTime;\\n        uint216 amount;\\n    }\\n\\n    mapping(address => Depositor) public depositors;\\n\\n    uint256 public totalDeposits;\\n    bool public emergencyExit;\\n    uint256 public maxLossRatio;\\n    address public feeReceiver;\\n    address public defaultFarm;\\n\\n    constructor(IERC20 oneInch_, uint256 expBase_, uint256 podsLimit)\\n        ERC20Pods(podsLimit, _POD_CALL_GAS_LIMIT)\\n        ERC20(\\\"Staking 1INCH\\\", \\\"st1INCH\\\")\\n        VotingPowerCalculator(expBase_, block.timestamp)\\n    {\\n        // voting power after MAX_LOCK_PERIOD should be equal to staked amount divided by _VOTING_POWER_DIVIDER\\n        if (_votingPowerAt(1e18, block.timestamp + MAX_LOCK_PERIOD) * _VOTING_POWER_DIVIDER < 1e18) revert ExpBaseTooBig();\\n        if (_votingPowerAt(1e18, block.timestamp + MAX_LOCK_PERIOD + 1) * _VOTING_POWER_DIVIDER > 1e18) revert ExpBaseTooSmall();\\n        oneInch = oneInch_;\\n    }\\n\\n    function setFeeReceiver(address feeReceiver_) external onlyOwner {\\n        feeReceiver = feeReceiver_;\\n        emit FeeReceiverSet(feeReceiver_);\\n    }\\n\\n    function setDefaultFarm(address defaultFarm_) external onlyOwner {\\n        if (defaultFarm_ != address(0) && Pod(defaultFarm_).token() != address(this)) revert DefaultFarmTokenMismatch();\\n        defaultFarm = defaultFarm_;\\n        emit DefaultFarmSet(defaultFarm_);\\n    }\\n\\n    function setMaxLossRatio(uint256 maxLossRatio_) external onlyOwner {\\n        if (maxLossRatio_ > _ONE) revert MaxLossOverflow();\\n        maxLossRatio = maxLossRatio_;\\n        emit MaxLossRatioSet(maxLossRatio_);\\n    }\\n\\n    function setEmergencyExit(bool _emergencyExit) external onlyOwner {\\n        emergencyExit = _emergencyExit;\\n        emit EmergencyExitSet(_emergencyExit);\\n    }\\n\\n    function votingPowerOf(address account) external view returns (uint256) {\\n        return _votingPowerAt(balanceOf(account), block.timestamp);\\n    }\\n\\n    function votingPowerOfAt(address account, uint256 timestamp) external view returns (uint256) {\\n        return _votingPowerAt(balanceOf(account), timestamp);\\n    }\\n\\n    function votingPower(uint256 balance) external view returns (uint256) {\\n        return _votingPowerAt(balance, block.timestamp);\\n    }\\n\\n    function votingPowerAt(uint256 balance, uint256 timestamp) external view returns (uint256) {\\n        return _votingPowerAt(balance, timestamp);\\n    }\\n\\n    function deposit(uint256 amount, uint256 duration) external {\\n        _deposit(msg.sender, amount, duration);\\n    }\\n\\n    function depositWithPermit(uint256 amount, uint256 duration, bytes calldata permit) external {\\n        oneInch.safePermit(permit);\\n        _deposit(msg.sender, amount, duration);\\n    }\\n\\n    function depositFor(address account, uint256 amount) external {\\n        _deposit(account, amount, 0);\\n    }\\n\\n    function depositForWithPermit(address account, uint256 amount, bytes calldata permit) external {\\n        oneInch.safePermit(permit);\\n        _deposit(account, amount, 0);\\n    }\\n\\n    function _deposit(address account, uint256 amount, uint256 duration) private {\\n        Depositor memory depositor = depositors[account]; // SLOAD\\n\\n        uint256 lockedTill = Math.max(depositor.unlockTime, block.timestamp) + duration;\\n        uint256 lockLeft = lockedTill - block.timestamp;\\n        if (lockLeft < MIN_LOCK_PERIOD) revert LockTimeLessMinLock();\\n        if (lockLeft > MAX_LOCK_PERIOD) revert LockTimeMoreMaxLock();\\n        uint256 balanceDiff = _balanceAt(depositor.amount + amount, lockedTill) / _VOTING_POWER_DIVIDER - balanceOf(account);\\n\\n        depositor.unlockTime = uint40(lockedTill);\\n        depositor.amount += uint216(amount);\\n        depositors[account] = depositor; // SSTORE\\n        totalDeposits += amount;\\n        _mint(account, balanceDiff);\\n\\n        if (amount > 0) {\\n            oneInch.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        if (defaultFarm != address(0) && !hasPod(account, defaultFarm)) {\\n            _addPod(account, defaultFarm);\\n        }\\n    }\\n\\n    function earlyWithdraw(uint256 minReturn, uint256 maxLoss) external {\\n        earlyWithdrawTo(msg.sender, minReturn, maxLoss);\\n    }\\n\\n    // ret(balance) = (deposit - vp(balance)) / 0.9\\n    function earlyWithdrawTo(address to, uint256 minReturn, uint256 maxLoss) public {\\n        Depositor memory depositor = depositors[msg.sender]; // SLOAD\\n        if (emergencyExit || block.timestamp >= depositor.unlockTime) revert StakeUnlocked();\\n        uint256 amount = depositor.amount;\\n        if (amount > 0) {\\n            uint256 balance = balanceOf(msg.sender);\\n            (uint256 loss, uint256 ret) = _earlyWithdrawLoss(amount, balance);\\n            if (ret < minReturn) revert MinReturnIsNotMet();\\n            if (loss > maxLoss) revert MaxLossIsNotMet();\\n            if (loss > amount * maxLossRatio / _ONE) revert LossIsTooBig();\\n\\n            _withdraw(depositor, amount, balance);\\n            oneInch.safeTransfer(to, ret);\\n            oneInch.safeTransfer(feeReceiver, loss);\\n        }\\n    }\\n\\n    function earlyWithdrawLoss(address account) external view returns (uint256 loss, uint256 ret, bool canWithdraw) {\\n        uint256 amount = depositors[account].amount;\\n        (loss, ret) = _earlyWithdrawLoss(amount, balanceOf(account));\\n        canWithdraw = loss <= amount * maxLossRatio / _ONE;\\n    }\\n\\n    function _earlyWithdrawLoss(uint256 depAmount, uint256 stBalance) private view returns (uint256 loss, uint256 ret) {\\n        ret = (depAmount - _votingPowerAt(stBalance, block.timestamp)) * 100 / 95;\\n        loss = depAmount - ret;\\n    }\\n\\n    function withdraw() external {\\n        withdrawTo(msg.sender);\\n    }\\n\\n    function withdrawTo(address to) public {\\n        Depositor memory depositor = depositors[msg.sender]; // SLOAD\\n        if (!emergencyExit && block.timestamp < depositor.unlockTime) revert UnlockTimeHasNotCome();\\n\\n        uint256 amount = depositor.amount;\\n        if (amount > 0) {\\n            _withdraw(depositor, amount, balanceOf(msg.sender));\\n            oneInch.safeTransfer(to, amount);\\n        }\\n    }\\n\\n    function _withdraw(Depositor memory depositor, uint256 amount, uint256 balance) private {\\n        totalDeposits -= amount;\\n        depositor.amount = 0;\\n        // keep unlockTime in storage for next tx optimization\\n        depositor.unlockTime = uint40(Math.min(depositor.unlockTime, block.timestamp));\\n        depositors[msg.sender] = depositor; // SSTORE\\n        _burn(msg.sender, balance);\\n    }\\n\\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\\n        if (address(token) == address(0)) {\\n            Address.sendValue(payable(msg.sender), amount);\\n        } else {\\n            if (token == oneInch) {\\n                if (amount > oneInch.balanceOf(address(this)) - totalDeposits) revert RescueAmountIsTooLarge();\\n            }\\n            token.safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    // ERC20 methods disablers\\n\\n    function approve(address, uint256) public pure override(IERC20, ERC20) returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function transfer(address, uint256) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function transferFrom(address, address, uint256) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function increaseAllowance(address, uint256) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function decreaseAllowance(address, uint256) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n}\\n\",\"keccak256\":\"0xe3cc0d40c8c8a57496fb8e500761345961adc3f1a8fcfa63b9056f3b4ac89789\",\"license\":\"MIT\"},\"contracts/helpers/VotingPowerCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ncontract VotingPowerCalculator {\\n    uint256 public immutable origin;\\n    uint256 public immutable expBase;\\n\\n    uint256 private immutable _expTable0;\\n    uint256 private immutable _expTable1;\\n    uint256 private immutable _expTable2;\\n    uint256 private immutable _expTable3;\\n    uint256 private immutable _expTable4;\\n    uint256 private immutable _expTable5;\\n    uint256 private immutable _expTable6;\\n    uint256 private immutable _expTable7;\\n    uint256 private immutable _expTable8;\\n    uint256 private immutable _expTable9;\\n    uint256 private immutable _expTable10;\\n    uint256 private immutable _expTable11;\\n    uint256 private immutable _expTable12;\\n    uint256 private immutable _expTable13;\\n    uint256 private immutable _expTable14;\\n    uint256 private immutable _expTable15;\\n    uint256 private immutable _expTable16;\\n    uint256 private immutable _expTable17;\\n    uint256 private immutable _expTable18;\\n    uint256 private immutable _expTable19;\\n    uint256 private immutable _expTable20;\\n    uint256 private immutable _expTable21;\\n    uint256 private immutable _expTable22;\\n    uint256 private immutable _expTable23;\\n    uint256 private immutable _expTable24;\\n    uint256 private immutable _expTable25;\\n    uint256 private immutable _expTable26;\\n    uint256 private immutable _expTable27;\\n    uint256 private immutable _expTable28;\\n    uint256 private immutable _expTable29;\\n\\n    constructor(uint256 expBase_, uint256 origin_) {\\n        origin = origin_;\\n        expBase = expBase_;\\n        _expTable0 = expBase_;\\n        _expTable1 = (_expTable0 * _expTable0) / 1e18;\\n        _expTable2 = (_expTable1 * _expTable1) / 1e18;\\n        _expTable3 = (_expTable2 * _expTable2) / 1e18;\\n        _expTable4 = (_expTable3 * _expTable3) / 1e18;\\n        _expTable5 = (_expTable4 * _expTable4) / 1e18;\\n        _expTable6 = (_expTable5 * _expTable5) / 1e18;\\n        _expTable7 = (_expTable6 * _expTable6) / 1e18;\\n        _expTable8 = (_expTable7 * _expTable7) / 1e18;\\n        _expTable9 = (_expTable8 * _expTable8) / 1e18;\\n        _expTable10 = (_expTable9 * _expTable9) / 1e18;\\n        _expTable11 = (_expTable10 * _expTable10) / 1e18;\\n        _expTable12 = (_expTable11 * _expTable11) / 1e18;\\n        _expTable13 = (_expTable12 * _expTable12) / 1e18;\\n        _expTable14 = (_expTable13 * _expTable13) / 1e18;\\n        _expTable15 = (_expTable14 * _expTable14) / 1e18;\\n        _expTable16 = (_expTable15 * _expTable15) / 1e18;\\n        _expTable17 = (_expTable16 * _expTable16) / 1e18;\\n        _expTable18 = (_expTable17 * _expTable17) / 1e18;\\n        _expTable19 = (_expTable18 * _expTable18) / 1e18;\\n        _expTable20 = (_expTable19 * _expTable19) / 1e18;\\n        _expTable21 = (_expTable20 * _expTable20) / 1e18;\\n        _expTable22 = (_expTable21 * _expTable21) / 1e18;\\n        _expTable23 = (_expTable22 * _expTable22) / 1e18;\\n        _expTable24 = (_expTable23 * _expTable23) / 1e18;\\n        _expTable25 = (_expTable24 * _expTable24) / 1e18;\\n        _expTable26 = (_expTable25 * _expTable25) / 1e18;\\n        _expTable27 = (_expTable26 * _expTable26) / 1e18;\\n        _expTable28 = (_expTable27 * _expTable27) / 1e18;\\n        _expTable29 = (_expTable28 * _expTable28) / 1e18;\\n    }\\n\\n    function _votingPowerAt(uint256 balance, uint256 timestamp) internal view returns (uint256 votingPower) {\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            votingPower = balance;\\n            if (t & 0x01 != 0) {\\n                votingPower = (votingPower * _expTable0) / 1e18;\\n            }\\n            if (t & 0x02 != 0) {\\n                votingPower = (votingPower * _expTable1) / 1e18;\\n            }\\n            if (t & 0x04 != 0) {\\n                votingPower = (votingPower * _expTable2) / 1e18;\\n            }\\n            if (t & 0x08 != 0) {\\n                votingPower = (votingPower * _expTable3) / 1e18;\\n            }\\n            if (t & 0x10 != 0) {\\n                votingPower = (votingPower * _expTable4) / 1e18;\\n            }\\n            if (t & 0x20 != 0) {\\n                votingPower = (votingPower * _expTable5) / 1e18;\\n            }\\n            if (t & 0x40 != 0) {\\n                votingPower = (votingPower * _expTable6) / 1e18;\\n            }\\n            if (t & 0x80 != 0) {\\n                votingPower = (votingPower * _expTable7) / 1e18;\\n            }\\n            if (t & 0x100 != 0) {\\n                votingPower = (votingPower * _expTable8) / 1e18;\\n            }\\n            if (t & 0x200 != 0) {\\n                votingPower = (votingPower * _expTable9) / 1e18;\\n            }\\n            if (t & 0x400 != 0) {\\n                votingPower = (votingPower * _expTable10) / 1e18;\\n            }\\n            if (t & 0x800 != 0) {\\n                votingPower = (votingPower * _expTable11) / 1e18;\\n            }\\n            if (t & 0x1000 != 0) {\\n                votingPower = (votingPower * _expTable12) / 1e18;\\n            }\\n            if (t & 0x2000 != 0) {\\n                votingPower = (votingPower * _expTable13) / 1e18;\\n            }\\n            if (t & 0x4000 != 0) {\\n                votingPower = (votingPower * _expTable14) / 1e18;\\n            }\\n            if (t & 0x8000 != 0) {\\n                votingPower = (votingPower * _expTable15) / 1e18;\\n            }\\n            if (t & 0x10000 != 0) {\\n                votingPower = (votingPower * _expTable16) / 1e18;\\n            }\\n            if (t & 0x20000 != 0) {\\n                votingPower = (votingPower * _expTable17) / 1e18;\\n            }\\n            if (t & 0x40000 != 0) {\\n                votingPower = (votingPower * _expTable18) / 1e18;\\n            }\\n            if (t & 0x80000 != 0) {\\n                votingPower = (votingPower * _expTable19) / 1e18;\\n            }\\n            if (t & 0x100000 != 0) {\\n                votingPower = (votingPower * _expTable20) / 1e18;\\n            }\\n            if (t & 0x200000 != 0) {\\n                votingPower = (votingPower * _expTable21) / 1e18;\\n            }\\n            if (t & 0x400000 != 0) {\\n                votingPower = (votingPower * _expTable22) / 1e18;\\n            }\\n            if (t & 0x800000 != 0) {\\n                votingPower = (votingPower * _expTable23) / 1e18;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                votingPower = (votingPower * _expTable24) / 1e18;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                votingPower = (votingPower * _expTable25) / 1e18;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                votingPower = (votingPower * _expTable26) / 1e18;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                votingPower = (votingPower * _expTable27) / 1e18;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                votingPower = (votingPower * _expTable28) / 1e18;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                votingPower = (votingPower * _expTable29) / 1e18;\\n            }\\n        }\\n        return votingPower;\\n    }\\n\\n    function _balanceAt(uint256 votingPower, uint256 timestamp) internal view returns (uint256 balance) {\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            balance = votingPower;\\n            if (t & 0x01 != 0) {\\n                balance = (balance * 1e18) / _expTable0;\\n            }\\n            if (t & 0x02 != 0) {\\n                balance = (balance * 1e18) / _expTable1;\\n            }\\n            if (t & 0x04 != 0) {\\n                balance = (balance * 1e18) / _expTable2;\\n            }\\n            if (t & 0x08 != 0) {\\n                balance = (balance * 1e18) / _expTable3;\\n            }\\n            if (t & 0x10 != 0) {\\n                balance = (balance * 1e18) / _expTable4;\\n            }\\n            if (t & 0x20 != 0) {\\n                balance = (balance * 1e18) / _expTable5;\\n            }\\n            if (t & 0x40 != 0) {\\n                balance = (balance * 1e18) / _expTable6;\\n            }\\n            if (t & 0x80 != 0) {\\n                balance = (balance * 1e18) / _expTable7;\\n            }\\n            if (t & 0x100 != 0) {\\n                balance = (balance * 1e18) / _expTable8;\\n            }\\n            if (t & 0x200 != 0) {\\n                balance = (balance * 1e18) / _expTable9;\\n            }\\n            if (t & 0x400 != 0) {\\n                balance = (balance * 1e18) / _expTable10;\\n            }\\n            if (t & 0x800 != 0) {\\n                balance = (balance * 1e18) / _expTable11;\\n            }\\n            if (t & 0x1000 != 0) {\\n                balance = (balance * 1e18) / _expTable12;\\n            }\\n            if (t & 0x2000 != 0) {\\n                balance = (balance * 1e18) / _expTable13;\\n            }\\n            if (t & 0x4000 != 0) {\\n                balance = (balance * 1e18) / _expTable14;\\n            }\\n            if (t & 0x8000 != 0) {\\n                balance = (balance * 1e18) / _expTable15;\\n            }\\n            if (t & 0x10000 != 0) {\\n                balance = (balance * 1e18) / _expTable16;\\n            }\\n            if (t & 0x20000 != 0) {\\n                balance = (balance * 1e18) / _expTable17;\\n            }\\n            if (t & 0x40000 != 0) {\\n                balance = (balance * 1e18) / _expTable18;\\n            }\\n            if (t & 0x80000 != 0) {\\n                balance = (balance * 1e18) / _expTable19;\\n            }\\n            if (t & 0x100000 != 0) {\\n                balance = (balance * 1e18) / _expTable20;\\n            }\\n            if (t & 0x200000 != 0) {\\n                balance = (balance * 1e18) / _expTable21;\\n            }\\n            if (t & 0x400000 != 0) {\\n                balance = (balance * 1e18) / _expTable22;\\n            }\\n            if (t & 0x800000 != 0) {\\n                balance = (balance * 1e18) / _expTable23;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                balance = (balance * 1e18) / _expTable24;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                balance = (balance * 1e18) / _expTable25;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                balance = (balance * 1e18) / _expTable26;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                balance = (balance * 1e18) / _expTable27;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                balance = (balance * 1e18) / _expTable28;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                balance = (balance * 1e18) / _expTable29;\\n            }\\n        }\\n        return balance;\\n    }\\n}\\n\",\"keccak256\":\"0x7f1f4ac963bd78843e492dd55745726149a2eb9f73adc8d82131c292a79c868d\",\"license\":\"MIT\"},\"contracts/interfaces/IVotable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVotable is IERC20 {\\n    /// @dev we assume that voting power is a function of balance that preserves order\\n    function votingPowerOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d7bd805a3d022454412a535bfd849b9e364548e77a82fffcd06590681d3d2e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6104a06040523480156200001257600080fd5b50604051620048133803806200481383398101604081905262000035916200069f565b806001600160a01b031663bca9c3fc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200009a91906200072c565b816001600160a01b031663938b5f326040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ff91906200072c565b6001600160a01b03831660805284848482828282826003620001228382620007d5565b506004620001318282620007d5565b50505060a087905250505060c085905250505060e0829052670de0b6b3a76400006200015e8380620008a1565b6200016a9190620008cd565b610100819052670de0b6b3a764000090620001869080620008a1565b620001929190620008cd565b610120819052670de0b6b3a764000090620001ae9080620008a1565b620001ba9190620008cd565b610140819052670de0b6b3a764000090620001d69080620008a1565b620001e29190620008cd565b610160819052670de0b6b3a764000090620001fe9080620008a1565b6200020a9190620008cd565b610180819052670de0b6b3a764000090620002269080620008a1565b620002329190620008cd565b6101a0819052670de0b6b3a7640000906200024e9080620008a1565b6200025a9190620008cd565b6101c0819052670de0b6b3a764000090620002769080620008a1565b620002829190620008cd565b6101e0819052670de0b6b3a7640000906200029e9080620008a1565b620002aa9190620008cd565b610200819052670de0b6b3a764000090620002c69080620008a1565b620002d29190620008cd565b610220819052670de0b6b3a764000090620002ee9080620008a1565b620002fa9190620008cd565b610240819052670de0b6b3a764000090620003169080620008a1565b620003229190620008cd565b610260819052670de0b6b3a7640000906200033e9080620008a1565b6200034a9190620008cd565b610280819052670de0b6b3a764000090620003669080620008a1565b620003729190620008cd565b6102a0819052670de0b6b3a7640000906200038e9080620008a1565b6200039a9190620008cd565b6102c0819052670de0b6b3a764000090620003b69080620008a1565b620003c29190620008cd565b6102e0819052670de0b6b3a764000090620003de9080620008a1565b620003ea9190620008cd565b610300819052670de0b6b3a764000090620004069080620008a1565b620004129190620008cd565b610320819052670de0b6b3a7640000906200042e9080620008a1565b6200043a9190620008cd565b610340819052670de0b6b3a764000090620004569080620008a1565b620004629190620008cd565b610360819052670de0b6b3a7640000906200047e9080620008a1565b6200048a9190620008cd565b610380819052670de0b6b3a764000090620004a69080620008a1565b620004b29190620008cd565b6103a0819052670de0b6b3a764000090620004ce9080620008a1565b620004da9190620008cd565b6103c0819052670de0b6b3a764000090620004f69080620008a1565b620005029190620008cd565b6103e0819052670de0b6b3a7640000906200051e9080620008a1565b6200052a9190620008cd565b610400819052670de0b6b3a764000090620005469080620008a1565b620005529190620008cd565b610420819052670de0b6b3a7640000906200056e9080620008a1565b6200057a9190620008cd565b610440819052670de0b6b3a764000090620005969080620008a1565b620005a29190620008cd565b610460819052670de0b6b3a764000090620005be9080620008a1565b620005ca9190620008cd565b6104805250620008f09350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200060257600080fd5b81516001600160401b03808211156200061f576200061f620005da565b604051601f8301601f19908116603f011681019082821181831017156200064a576200064a620005da565b816040528381526020925086838588010111156200066757600080fd5b600091505b838210156200068b57858201830151818301840152908201906200066c565b600093810190920192909252949350505050565b600080600060608486031215620006b557600080fd5b83516001600160401b0380821115620006cd57600080fd5b620006db87838801620005f0565b94506020860151915080821115620006f257600080fd5b506200070186828701620005f0565b604086015190935090506001600160a01b03811681146200072157600080fd5b809150509250925092565b6000602082840312156200073f57600080fd5b5051919050565b600181811c908216806200075b57607f821691505b6020821081036200077c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620007d057600081815260208120601f850160051c81016020861015620007ab5750805b601f850160051c820191505b81811015620007cc57828155600101620007b7565b5050505b505050565b81516001600160401b03811115620007f157620007f1620005da565b620008098162000802845462000746565b8462000782565b602080601f831160018114620008415760008415620008285750858301515b600019600386901b1c1916600185901b178555620007cc565b600085815260208120601f198616915b82811015620008725788860151825594840194600190910190840162000851565b5085821015620008915787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417620008c757634e487b7160e01b600052601160045260246000fd5b92915050565b600082620008eb57634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c0516103e0516104005161042051610440516104605161048051613d9562000a7e60003960006115780152600061153b015260006114fe015260006114c101526000611484015260006114470152600061140a015260006113ce01526000611392015260006113560152600061131a015260006112de015260006112a2015260006112660152600061122a015260006111ef015260006111b4015260006111790152600061113e01526000611103015260006110c80152600061108d015260006110520152600061101801526000610fde01526000610fa401526000610f6a01526000610f3001526000610ef601526000610ebc0152600061038b01526000818161030f0152610e86015260008181610463015281816108fb0152610c610152613d956000f3fe60806040523480156200001157600080fd5b5060043610620001a15760003560e01c8063938b5f3211620000e9578063bca9c3fc1162000097578063e8a60558116200006e578063e8a60558146200040d578063f3598ad91462000424578063fc0c546a146200045d57600080fd5b8063bca9c3fc1462000385578063bcc3f3bd14620003ad578063dd62ed3e14620003c457600080fd5b8063a457c2d711620000cc578063a457c2d71462000227578063a9059cbb146200033b578063b04807ec146200034c57600080fd5b8063938b5f32146200030957806395d89b41146200033157600080fd5b8063313ce56711620001535780635c19a95c116200012a5780635c19a95c14620002a257806370a0823114620002b95780637a1f1aa914620002f257600080fd5b8063313ce56714620002795780633950935114620002275780633c3f3c23146200028957600080fd5b8063095ea7b31162000188578063095ea7b3146200022757806318160ddd146200024f57806323b872dd146200026257600080fd5b806306fdde0314620001a65780630840605a14620001c8575b600080fd5b620001b062000485565b604051620001bf919062001bf7565b60405180910390f35b62000201620001d936600462001c39565b60066020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001620001bf565b6200023e6200023836600462001c59565b6200051f565b6040519015158152602001620001bf565b6002545b604051908152602001620001bf565b6200023e6200027336600462001c88565b62000553565b60405160128152602001620001bf565b620002a06200029a36600462001c39565b62000587565b005b620002a0620002b336600462001c39565b62000782565b62000253620002ca36600462001c39565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b620002a06200030336600462001c88565b620008e3565b620002537f000000000000000000000000000000000000000000000000000000000000000081565b620001b062000a01565b6200023e6200027336600462001c59565b620002016200035d36600462001c39565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b620002537f000000000000000000000000000000000000000000000000000000000000000081565b62000253620003be36600462001c39565b62000a12565b62000253620003d536600462001cce565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b620002016200041e36600462001dee565b62000a4a565b620002016200043536600462001c39565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b620002017f000000000000000000000000000000000000000000000000000000000000000081565b606060038054620004969062001e62565b80601f0160208091040260200160405190810160405280929190818152602001828054620004c49062001e62565b8015620005155780601f10620004e95761010080835404028352916020019162000515565b820191906000526020600020905b815481529060010190602001808311620004f757829003601f168201915b5050505050905090565b60006040517feb60c2c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa24e573d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526006602052604090205473ffffffffffffffffffffffffffffffffffffffff16620005e4576040517fccd4942000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811615801590620006c35750336000908152600660209081526040918290205482517ffc0c546a000000000000000000000000000000000000000000000000000000008152925173ffffffffffffffffffffffffffffffffffffffff918216939185169263fc0c546a92600480820193918290030181865afa15801562000684573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006aa919062001eb7565b73ffffffffffffffffffffffffffffffffffffffff1614155b15620006fb576040517fb599ae3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526007602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff851690811790915591519182527fdd367fa3b0132bc9c4680deca3d4565375dda9ed37c98f8321370efe4594785a910160405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff8082166000818152600660205260409020549091169015801590620007d0575073ffffffffffffffffffffffffffffffffffffffff8116155b1562000808576040517fccd4942000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620008138262000b70565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600760205260409020541615620008df5773ffffffffffffffffffffffffffffffffffffffff828116600090815260076020526040908190205490517ff70f6a9a00000000000000000000000000000000000000000000000000000000815233600482015290821660248201529082169063f70f6a9a90604401600060405180830381600087803b158015620008c557600080fd5b505af1158015620008da573d6000803e3d6000fd5b505050505b5050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161462000953576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620009fc838373ffffffffffffffffffffffffffffffffffffffff821615620009a45773ffffffffffffffffffffffffffffffffffffffff80871660009081526005602052604090205416620009a7565b60005b73ffffffffffffffffffffffffffffffffffffffff861615620009f25773ffffffffffffffffffffffffffffffffffffffff80871660009081526005602052604090205416620009f5565b60005b8562000cf7565b505050565b606060048054620004969062001e62565b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604081205462000a44904262000e83565b92915050565b3360009081526006602052604081205473ffffffffffffffffffffffffffffffffffffffff161562000aa8576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83838360405162000ab99062001b83565b62000ac79392919062001ed7565b604051809103906000f08015801562000ae4573d6000803e3d6000fd5b503360008181526006602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861617905590519182529192507fb2bd819aacce2076359caf6d49d9ac5252134cffdffe026bf4ad781dc3847790910160405180910390a19392505050565b3360009081526005602052604090205473ffffffffffffffffffffffffffffffffffffffff9081169082168114620008df573360008181526005602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87169081179091558251938452908301527f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea2910160405180910390a16040517f3466a8860000000000000000000000000000000000000000000000000000000081523060048201523360248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633466a88690604401602060405180830381865afa15801562000cbe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ce4919062001f11565b90508015620009fc57620009fc33338486855b62000d068585858585620015a4565b73ffffffffffffffffffffffffffffffffffffffff83161562000dc15773ffffffffffffffffffffffffffffffffffffffff838116600090815260066020526040908190205490517f9dc29fac000000000000000000000000000000000000000000000000000000008152878316600482015260248101849052911690639dc29fac90604401600060405180830381600087803b15801562000da757600080fd5b505af115801562000dbc573d6000803e3d6000fd5b505050505b73ffffffffffffffffffffffffffffffffffffffff82161562000e7c5773ffffffffffffffffffffffffffffffffffffffff828116600090815260066020526040908190205490517f40c10f190000000000000000000000000000000000000000000000000000000081528683166004820152602481018490529116906340c10f1990604401600060405180830381600087803b15801562000e6257600080fd5b505af115801562000e77573d6000803e3d6000fd5b505050505b5050505050565b817f00000000000000000000000000000000000000000000000000000000000000008203600181161562000ee157670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600281161562000f1b57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600481161562000f5557670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600881161562000f8f57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b601081161562000fc957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b60208116156200100357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b60408116156200103d57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b60808116156200107757670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b610100811615620010b257670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b610200811615620010ed57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6104008116156200112857670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6108008116156200116357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6110008116156200119e57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b612000811615620011d957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6140008116156200121457670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6180008116156200124f57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620100008116156200128b57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b62020000811615620012c757670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620400008116156200130357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620800008116156200133f57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b621000008116156200137b57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b62200000811615620013b757670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b62400000811615620013f357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b628000008116156200142f57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63010000008116156200146c57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6302000000811615620014a957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6304000000811615620014e657670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63080000008116156200152357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63100000008116156200156057670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63200000008116156200159d57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b5092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015620015e15750600081115b1562000e7c5773ffffffffffffffffffffffffffffffffffffffff831662001615576200160f82826200164a565b62000e7c565b73ffffffffffffffffffffffffffffffffffffffff82166200163d576200160f838262001745565b62000e7c8383836200190d565b73ffffffffffffffffffffffffffffffffffffffff8216620016cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b8060026000828254620016e1919062001f2b565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff8216620017ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401620016c4565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015620018a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401620016c4565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316620019b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401620016c4565b73ffffffffffffffffffffffffffffffffffffffff821662001a57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401620016c4565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548181101562001b0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401620016c4565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350505050565b611df98062001f6783390190565b6000815180845260005b8181101562001bb95760208185018101518683018201520162001b9b565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600062001c0c602083018462001b91565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811462001c3657600080fd5b50565b60006020828403121562001c4c57600080fd5b813562001c0c8162001c13565b6000806040838503121562001c6d57600080fd5b823562001c7a8162001c13565b946020939093013593505050565b60008060006060848603121562001c9e57600080fd5b833562001cab8162001c13565b9250602084013562001cbd8162001c13565b929592945050506040919091013590565b6000806040838503121562001ce257600080fd5b823562001cef8162001c13565b9150602083013562001d018162001c13565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011262001d4d57600080fd5b813567ffffffffffffffff8082111562001d6b5762001d6b62001d0c565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171562001db45762001db462001d0c565b8160405283815286602085880101111562001dce57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121562001e0457600080fd5b833567ffffffffffffffff8082111562001e1d57600080fd5b62001e2b8783880162001d3b565b9450602086013591508082111562001e4257600080fd5b5062001e518682870162001d3b565b925050604084013590509250925092565b600181811c9082168062001e7757607f821691505b60208210810362001eb1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006020828403121562001eca57600080fd5b815162001c0c8162001c13565b60608152600062001eec606083018662001b91565b828103602084015262001f00818662001b91565b915050826040830152949350505050565b60006020828403121562001f2457600080fd5b5051919050565b8082018082111562000a44577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfe60c06040523480156200001157600080fd5b5060405162001df938038062001df98339810160408190526200003491620001b1565b80620186a084846003620000498382620002b3565b506004620000588282620002b3565b505050608082905260a08190526200007d600562000094602090811b6200083b17901c565b506200008b9050336200009a565b5050506200037f565b60019055565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200011457600080fd5b81516001600160401b0380821115620001315762000131620000ec565b604051601f8301601f19908116603f011681019082821181831017156200015c576200015c620000ec565b816040528381526020925086838588010111156200017957600080fd5b600091505b838210156200019d57858201830151818301840152908201906200017e565b600093810190920192909252949350505050565b600080600060608486031215620001c757600080fd5b83516001600160401b0380821115620001df57600080fd5b620001ed8783880162000102565b945060208601519150808211156200020457600080fd5b50620002138682870162000102565b925050604084015190509250925092565b600181811c908216806200023957607f821691505b6020821081036200025a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002ae57600081815260208120601f850160051c81016020861015620002895750805b601f850160051c820191505b81811015620002aa5782815560010162000295565b5050505b505050565b81516001600160401b03811115620002cf57620002cf620000ec565b620002e781620002e0845462000224565b8462000260565b602080601f8311600181146200031f5760008415620003065750858301515b600019600386901b1c1916600185901b178555620002aa565b600085815260208120601f198616915b8281101562000350578886015182559484019460019091019084016200032f565b50858210156200036f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051611a46620003b36000396000818161035f01526111090152600081816102be0152610b340152611a466000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063715018a6116100f9578063a457c2d711610097578063dd62ed3e11610071578063dd62ed3e14610397578063f2fde38b146103dd578063f55f545c146103f0578063f70f6a9a1461041057600080fd5b8063a457c2d7146101dc578063a9059cbb14610381578063ada6f64b1461038f57600080fd5b80638da5cb5b116100d35780638da5cb5b1461032157806395d89b411461033f5780639dc29fac14610347578063a44282dc1461035a57600080fd5b8063715018a6146102f35780637a3e60e9146102fb5780638da031df1461030e57600080fd5b80633466a8861161016657806340f99a941161014057806340f99a941461026e578063538db923146102a657806366b0dede146102b957806370a08231146102e057600080fd5b80633466a8861461024857806339509351146101dc57806340c10f191461025b57600080fd5b8063222d6b4d11610197578063222d6b4d1461021157806323b872dd14610226578063313ce5671461023957600080fd5b806306fdde03146101be578063095ea7b3146101dc57806318160ddd146101ff575b600080fd5b6101c6610423565b6040516101d39190611788565b60405180910390f35b6101ef6101ea36600461181d565b6104b5565b60405190151581526020016101d3565b6002545b6040519081526020016101d3565b61022461021f366004611847565b6104e9565b005b6101ef610234366004611862565b6104f6565b604051601281526020016101d3565b61020361025636600461189e565b61052a565b61022461026936600461181d565b6105b8565b61028161027c36600461181d565b6105ce565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d3565b6102246102b4366004611847565b610606565b6102037f000000000000000000000000000000000000000000000000000000000000000081565b6102036102ee366004611847565b610610565b610224610685565b610203610309366004611847565b610699565b6101ef61031c36600461189e565b6106c7565b60075473ffffffffffffffffffffffffffffffffffffffff16610281565b6101c6610707565b61022461035536600461181d565b610716565b6102037f000000000000000000000000000000000000000000000000000000000000000081565b6101ef61023436600461181d565b610224610728565b6102036103a536600461189e565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6102246103eb366004611847565b610731565b6104036103fe366004611847565b6107ea565b6040516101d391906118d1565b61022461041e36600461189e565b61081b565b6060600380546104329061192b565b80601f016020809104026020016040519081016040528092919081815260200182805461045e9061192b565b80156104ab5780601f10610480576101008083540402835291602001916104ab565b820191906000526020600020905b81548152906001019060200180831161048e57829003601f168201915b5050505050905090565b60006040517feb60c2c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104f33382610841565b50565b60006040517fa24e573d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006005610539815460021490565b15610570576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61057a83856106c7565b156105ac5773ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205491506105b1565b600091505b5092915050565b6105c06108cb565b6105ca828261094c565b5050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604081206105fd9083610a47565b90505b92915050565b6104f33382610a5b565b6000600561061f815460021490565b15610656576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205491505b50919050565b61068d6108cb565b6106976000610bb5565b565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040812061060090610c2c565b73ffffffffffffffffffffffffffffffffffffffff82811660009081526006602090815260408083209385168352600190930190529081205415156105fd565b6060600480546104329061192b565b61071e6108cb565b6105ca8282610c43565b61069733610e0e565b6107396108cb565b73ffffffffffffffffffffffffffffffffffffffff81166107e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6104f381610bb5565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040902060609061060090610f1f565b6108236108cb565b61082d82826106c7565b6105ca576105ca8282610a5b565b60019055565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604090206108709082610f8c565b6108a6576040517f826fbca300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108b183610610565b905080156108c6576108c682846000846110a7565b505050565b60075473ffffffffffffffffffffffffffffffffffffffff163314610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107d8565b73ffffffffffffffffffffffffffffffffffffffff82166109c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016107d8565b80600260008282546109db9190611978565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36105ca60008383611156565b6000818152602083905260408120546105fd565b73ffffffffffffffffffffffffffffffffffffffff8116610aa8576040517f960357e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260409020610ad79082611392565b610b0d576040517fcbdb297300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604090207f000000000000000000000000000000000000000000000000000000000000000090610b5d90610c2c565b1115610b95576040517fc87e91a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610ba083610610565b905080156108c6576108c682600085846110a7565b6007805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008080526020829052604081205460a01c610600565b73ffffffffffffffffffffffffffffffffffffffff8216610ce6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016107d8565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015610d9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016107d8565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36108c683600084611156565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120610e3c90610f1f565b90506000610e4983610610565b82519091505b8015610f19578115610e8457610e84836001830381518110610e7357610e736119b2565b6020026020010151856000856110a7565b610ef1836001830381518110610e9c57610e9c6119b2565b6020026020010151600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610f8c90919063ffffffff16565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610e4f565b50505050565b60008080526020829052604090205460609060a081901c67ffffffffffffffff811115610f4e57610f4e6119e1565b604051908082528060200260200182016040528015610f77578160200160208202803683370190505b509150610f85838383611403565b5050919050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600183016020526040812054808203610fc5576000915050610600565b60008080526020859052604090205460a01c811015611071576000808052602085905260408082205460a01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182528120549050611047857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8401836114ec565b73ffffffffffffffffffffffffffffffffffffffff16600090815260018501602052604090208190555b61107a8461159e565b505073ffffffffffffffffffffffffffffffffffffffff1660009081526001918201602052604081205590565b604080517f7a1f1aa900000000000000000000000000000000000000000000000000000000808252600482018690526024820185905260448201849052917f1c26714c00000000000000000000000000000000000000000000000000000000917f0000000000000000000000000000000000000000000000000000000000000000918290603f5a02041015611140578260005260046000fd5b60008060648360008c87f1505050505050505050565b600561116181611660565b60008211801561119d57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b156113895773ffffffffffffffffffffffffffffffffffffffff841660009081526006602052604081206111d090610f1f565b73ffffffffffffffffffffffffffffffffffffffff851660009081526006602052604081209192509061120290610f1f565b825181519192509060005b8281101561130f576000858281518110611229576112296119b2565b6020026020010151905060005b838110156112f157858181518110611250576112506119b2565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112e957611296828c8c8c6110a7565b60008682815181106112aa576112aa6119b2565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506112f1565b600101611236565b83810361130557611305828c60008c6110a7565b505060010161120d565b5060005b8181101561138357600084828151811061132f5761132f6119b2565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461137a5761137a8160008b8b6110a7565b50600101611313565b50505050505b60018155610f19565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600183016020526040812054156113c757506000610600565b6113d183836116c0565b73ffffffffffffffffffffffffffffffffffffffff929092166000908152600193840160205260409020919091555090565b815160609060a083901c90811115611447576040517ff9a99b2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156114e3578284600081518110611461576114616119b2565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260015b818110156114e15760008181526020879052604090205485518690839081106114b4576114b46119b2565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101611489565b505b50919392505050565b60008080526020849052604090205460a01c808310611537576040517f4e23d03500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260000361157157600080805260208590526040902060a082901b73ffffffffffffffffffffffffffffffffffffffff8416179055610f19565b600083815260208590526040902073ffffffffffffffffffffffffffffffffffffffff8316905550505050565b6000808052602082905260408120549060a082901c908190036115ed576040517f06a2af9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810160009081526020849052604081205560018111156108c65760008080526020849052604090207fffffffffffffffffffffffff000000000000000000000000000000000000000083019055505050565b80547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016116ba576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b60008080526020839052604081205460a081901c80830361173557600080805260208690526040902074ffffffffffffffffffffffffffffffffffffffffff7401000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff87160116905561177d565b6000808052602086905260408082207401000000000000000000000000000000000000000085019055828252902073ffffffffffffffffffffffffffffffffffffffff851690555b600101949350505050565b600060208083528351808285015260005b818110156117b557858101830151858201604001528201611799565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461181857600080fd5b919050565b6000806040838503121561183057600080fd5b611839836117f4565b946020939093013593505050565b60006020828403121561185957600080fd5b6105fd826117f4565b60008060006060848603121561187757600080fd5b611880846117f4565b925061188e602085016117f4565b9150604084013590509250925092565b600080604083850312156118b157600080fd5b6118ba836117f4565b91506118c8602084016117f4565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561191f57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016118ed565b50909695505050505050565b600181811c9082168061193f57607f821691505b60208210810361067f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b80820180821115610600577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212202b26910d92e7e5941f6887645e91ecf6722d321d4fcc0021674fa85b280109af64736f6c63430008110033a2646970667358221220b45049567294110be0ad7d86a448f5ebc125ff725ea46c25bfc25d92d75ad5d164736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001a15760003560e01c8063938b5f3211620000e9578063bca9c3fc1162000097578063e8a60558116200006e578063e8a60558146200040d578063f3598ad91462000424578063fc0c546a146200045d57600080fd5b8063bca9c3fc1462000385578063bcc3f3bd14620003ad578063dd62ed3e14620003c457600080fd5b8063a457c2d711620000cc578063a457c2d71462000227578063a9059cbb146200033b578063b04807ec146200034c57600080fd5b8063938b5f32146200030957806395d89b41146200033157600080fd5b8063313ce56711620001535780635c19a95c116200012a5780635c19a95c14620002a257806370a0823114620002b95780637a1f1aa914620002f257600080fd5b8063313ce56714620002795780633950935114620002275780633c3f3c23146200028957600080fd5b8063095ea7b31162000188578063095ea7b3146200022757806318160ddd146200024f57806323b872dd146200026257600080fd5b806306fdde0314620001a65780630840605a14620001c8575b600080fd5b620001b062000485565b604051620001bf919062001bf7565b60405180910390f35b62000201620001d936600462001c39565b60066020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001620001bf565b6200023e6200023836600462001c59565b6200051f565b6040519015158152602001620001bf565b6002545b604051908152602001620001bf565b6200023e6200027336600462001c88565b62000553565b60405160128152602001620001bf565b620002a06200029a36600462001c39565b62000587565b005b620002a0620002b336600462001c39565b62000782565b62000253620002ca36600462001c39565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b620002a06200030336600462001c88565b620008e3565b620002537f000000000000000000000000000000000000000000000000000000000000000081565b620001b062000a01565b6200023e6200027336600462001c59565b620002016200035d36600462001c39565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b620002537f000000000000000000000000000000000000000000000000000000000000000081565b62000253620003be36600462001c39565b62000a12565b62000253620003d536600462001cce565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b620002016200041e36600462001dee565b62000a4a565b620002016200043536600462001c39565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b620002017f000000000000000000000000000000000000000000000000000000000000000081565b606060038054620004969062001e62565b80601f0160208091040260200160405190810160405280929190818152602001828054620004c49062001e62565b8015620005155780601f10620004e95761010080835404028352916020019162000515565b820191906000526020600020905b815481529060010190602001808311620004f757829003601f168201915b5050505050905090565b60006040517feb60c2c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa24e573d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526006602052604090205473ffffffffffffffffffffffffffffffffffffffff16620005e4576040517fccd4942000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811615801590620006c35750336000908152600660209081526040918290205482517ffc0c546a000000000000000000000000000000000000000000000000000000008152925173ffffffffffffffffffffffffffffffffffffffff918216939185169263fc0c546a92600480820193918290030181865afa15801562000684573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006aa919062001eb7565b73ffffffffffffffffffffffffffffffffffffffff1614155b15620006fb576040517fb599ae3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526007602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff851690811790915591519182527fdd367fa3b0132bc9c4680deca3d4565375dda9ed37c98f8321370efe4594785a910160405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff8082166000818152600660205260409020549091169015801590620007d0575073ffffffffffffffffffffffffffffffffffffffff8116155b1562000808576040517fccd4942000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620008138262000b70565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600760205260409020541615620008df5773ffffffffffffffffffffffffffffffffffffffff828116600090815260076020526040908190205490517ff70f6a9a00000000000000000000000000000000000000000000000000000000815233600482015290821660248201529082169063f70f6a9a90604401600060405180830381600087803b158015620008c557600080fd5b505af1158015620008da573d6000803e3d6000fd5b505050505b5050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161462000953576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620009fc838373ffffffffffffffffffffffffffffffffffffffff821615620009a45773ffffffffffffffffffffffffffffffffffffffff80871660009081526005602052604090205416620009a7565b60005b73ffffffffffffffffffffffffffffffffffffffff861615620009f25773ffffffffffffffffffffffffffffffffffffffff80871660009081526005602052604090205416620009f5565b60005b8562000cf7565b505050565b606060048054620004969062001e62565b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604081205462000a44904262000e83565b92915050565b3360009081526006602052604081205473ffffffffffffffffffffffffffffffffffffffff161562000aa8576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83838360405162000ab99062001b83565b62000ac79392919062001ed7565b604051809103906000f08015801562000ae4573d6000803e3d6000fd5b503360008181526006602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861617905590519182529192507fb2bd819aacce2076359caf6d49d9ac5252134cffdffe026bf4ad781dc3847790910160405180910390a19392505050565b3360009081526005602052604090205473ffffffffffffffffffffffffffffffffffffffff9081169082168114620008df573360008181526005602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87169081179091558251938452908301527f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea2910160405180910390a16040517f3466a8860000000000000000000000000000000000000000000000000000000081523060048201523360248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633466a88690604401602060405180830381865afa15801562000cbe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ce4919062001f11565b90508015620009fc57620009fc33338486855b62000d068585858585620015a4565b73ffffffffffffffffffffffffffffffffffffffff83161562000dc15773ffffffffffffffffffffffffffffffffffffffff838116600090815260066020526040908190205490517f9dc29fac000000000000000000000000000000000000000000000000000000008152878316600482015260248101849052911690639dc29fac90604401600060405180830381600087803b15801562000da757600080fd5b505af115801562000dbc573d6000803e3d6000fd5b505050505b73ffffffffffffffffffffffffffffffffffffffff82161562000e7c5773ffffffffffffffffffffffffffffffffffffffff828116600090815260066020526040908190205490517f40c10f190000000000000000000000000000000000000000000000000000000081528683166004820152602481018490529116906340c10f1990604401600060405180830381600087803b15801562000e6257600080fd5b505af115801562000e77573d6000803e3d6000fd5b505050505b5050505050565b817f00000000000000000000000000000000000000000000000000000000000000008203600181161562000ee157670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600281161562000f1b57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600481161562000f5557670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600881161562000f8f57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b601081161562000fc957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b60208116156200100357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b60408116156200103d57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b60808116156200107757670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b610100811615620010b257670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b610200811615620010ed57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6104008116156200112857670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6108008116156200116357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6110008116156200119e57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b612000811615620011d957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6140008116156200121457670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6180008116156200124f57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620100008116156200128b57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b62020000811615620012c757670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620400008116156200130357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620800008116156200133f57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b621000008116156200137b57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b62200000811615620013b757670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b62400000811615620013f357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b628000008116156200142f57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63010000008116156200146c57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6302000000811615620014a957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6304000000811615620014e657670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63080000008116156200152357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63100000008116156200156057670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63200000008116156200159d57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b5092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015620015e15750600081115b1562000e7c5773ffffffffffffffffffffffffffffffffffffffff831662001615576200160f82826200164a565b62000e7c565b73ffffffffffffffffffffffffffffffffffffffff82166200163d576200160f838262001745565b62000e7c8383836200190d565b73ffffffffffffffffffffffffffffffffffffffff8216620016cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b8060026000828254620016e1919062001f2b565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff8216620017ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401620016c4565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015620018a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401620016c4565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316620019b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401620016c4565b73ffffffffffffffffffffffffffffffffffffffff821662001a57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401620016c4565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548181101562001b0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401620016c4565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350505050565b611df98062001f6783390190565b6000815180845260005b8181101562001bb95760208185018101518683018201520162001b9b565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600062001c0c602083018462001b91565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811462001c3657600080fd5b50565b60006020828403121562001c4c57600080fd5b813562001c0c8162001c13565b6000806040838503121562001c6d57600080fd5b823562001c7a8162001c13565b946020939093013593505050565b60008060006060848603121562001c9e57600080fd5b833562001cab8162001c13565b9250602084013562001cbd8162001c13565b929592945050506040919091013590565b6000806040838503121562001ce257600080fd5b823562001cef8162001c13565b9150602083013562001d018162001c13565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011262001d4d57600080fd5b813567ffffffffffffffff8082111562001d6b5762001d6b62001d0c565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171562001db45762001db462001d0c565b8160405283815286602085880101111562001dce57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121562001e0457600080fd5b833567ffffffffffffffff8082111562001e1d57600080fd5b62001e2b8783880162001d3b565b9450602086013591508082111562001e4257600080fd5b5062001e518682870162001d3b565b925050604084013590509250925092565b600181811c9082168062001e7757607f821691505b60208210810362001eb1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006020828403121562001eca57600080fd5b815162001c0c8162001c13565b60608152600062001eec606083018662001b91565b828103602084015262001f00818662001b91565b915050826040830152949350505050565b60006020828403121562001f2457600080fd5b5051919050565b8082018082111562000a44577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfe60c06040523480156200001157600080fd5b5060405162001df938038062001df98339810160408190526200003491620001b1565b80620186a084846003620000498382620002b3565b506004620000588282620002b3565b505050608082905260a08190526200007d600562000094602090811b6200083b17901c565b506200008b9050336200009a565b5050506200037f565b60019055565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200011457600080fd5b81516001600160401b0380821115620001315762000131620000ec565b604051601f8301601f19908116603f011681019082821181831017156200015c576200015c620000ec565b816040528381526020925086838588010111156200017957600080fd5b600091505b838210156200019d57858201830151818301840152908201906200017e565b600093810190920192909252949350505050565b600080600060608486031215620001c757600080fd5b83516001600160401b0380821115620001df57600080fd5b620001ed8783880162000102565b945060208601519150808211156200020457600080fd5b50620002138682870162000102565b925050604084015190509250925092565b600181811c908216806200023957607f821691505b6020821081036200025a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002ae57600081815260208120601f850160051c81016020861015620002895750805b601f850160051c820191505b81811015620002aa5782815560010162000295565b5050505b505050565b81516001600160401b03811115620002cf57620002cf620000ec565b620002e781620002e0845462000224565b8462000260565b602080601f8311600181146200031f5760008415620003065750858301515b600019600386901b1c1916600185901b178555620002aa565b600085815260208120601f198616915b8281101562000350578886015182559484019460019091019084016200032f565b50858210156200036f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051611a46620003b36000396000818161035f01526111090152600081816102be0152610b340152611a466000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063715018a6116100f9578063a457c2d711610097578063dd62ed3e11610071578063dd62ed3e14610397578063f2fde38b146103dd578063f55f545c146103f0578063f70f6a9a1461041057600080fd5b8063a457c2d7146101dc578063a9059cbb14610381578063ada6f64b1461038f57600080fd5b80638da5cb5b116100d35780638da5cb5b1461032157806395d89b411461033f5780639dc29fac14610347578063a44282dc1461035a57600080fd5b8063715018a6146102f35780637a3e60e9146102fb5780638da031df1461030e57600080fd5b80633466a8861161016657806340f99a941161014057806340f99a941461026e578063538db923146102a657806366b0dede146102b957806370a08231146102e057600080fd5b80633466a8861461024857806339509351146101dc57806340c10f191461025b57600080fd5b8063222d6b4d11610197578063222d6b4d1461021157806323b872dd14610226578063313ce5671461023957600080fd5b806306fdde03146101be578063095ea7b3146101dc57806318160ddd146101ff575b600080fd5b6101c6610423565b6040516101d39190611788565b60405180910390f35b6101ef6101ea36600461181d565b6104b5565b60405190151581526020016101d3565b6002545b6040519081526020016101d3565b61022461021f366004611847565b6104e9565b005b6101ef610234366004611862565b6104f6565b604051601281526020016101d3565b61020361025636600461189e565b61052a565b61022461026936600461181d565b6105b8565b61028161027c36600461181d565b6105ce565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d3565b6102246102b4366004611847565b610606565b6102037f000000000000000000000000000000000000000000000000000000000000000081565b6102036102ee366004611847565b610610565b610224610685565b610203610309366004611847565b610699565b6101ef61031c36600461189e565b6106c7565b60075473ffffffffffffffffffffffffffffffffffffffff16610281565b6101c6610707565b61022461035536600461181d565b610716565b6102037f000000000000000000000000000000000000000000000000000000000000000081565b6101ef61023436600461181d565b610224610728565b6102036103a536600461189e565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6102246103eb366004611847565b610731565b6104036103fe366004611847565b6107ea565b6040516101d391906118d1565b61022461041e36600461189e565b61081b565b6060600380546104329061192b565b80601f016020809104026020016040519081016040528092919081815260200182805461045e9061192b565b80156104ab5780601f10610480576101008083540402835291602001916104ab565b820191906000526020600020905b81548152906001019060200180831161048e57829003601f168201915b5050505050905090565b60006040517feb60c2c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104f33382610841565b50565b60006040517fa24e573d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006005610539815460021490565b15610570576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61057a83856106c7565b156105ac5773ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205491506105b1565b600091505b5092915050565b6105c06108cb565b6105ca828261094c565b5050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604081206105fd9083610a47565b90505b92915050565b6104f33382610a5b565b6000600561061f815460021490565b15610656576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205491505b50919050565b61068d6108cb565b6106976000610bb5565b565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040812061060090610c2c565b73ffffffffffffffffffffffffffffffffffffffff82811660009081526006602090815260408083209385168352600190930190529081205415156105fd565b6060600480546104329061192b565b61071e6108cb565b6105ca8282610c43565b61069733610e0e565b6107396108cb565b73ffffffffffffffffffffffffffffffffffffffff81166107e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6104f381610bb5565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040902060609061060090610f1f565b6108236108cb565b61082d82826106c7565b6105ca576105ca8282610a5b565b60019055565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604090206108709082610f8c565b6108a6576040517f826fbca300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108b183610610565b905080156108c6576108c682846000846110a7565b505050565b60075473ffffffffffffffffffffffffffffffffffffffff163314610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107d8565b73ffffffffffffffffffffffffffffffffffffffff82166109c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016107d8565b80600260008282546109db9190611978565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36105ca60008383611156565b6000818152602083905260408120546105fd565b73ffffffffffffffffffffffffffffffffffffffff8116610aa8576040517f960357e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260409020610ad79082611392565b610b0d576040517fcbdb297300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604090207f000000000000000000000000000000000000000000000000000000000000000090610b5d90610c2c565b1115610b95576040517fc87e91a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610ba083610610565b905080156108c6576108c682600085846110a7565b6007805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008080526020829052604081205460a01c610600565b73ffffffffffffffffffffffffffffffffffffffff8216610ce6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016107d8565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015610d9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016107d8565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36108c683600084611156565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120610e3c90610f1f565b90506000610e4983610610565b82519091505b8015610f19578115610e8457610e84836001830381518110610e7357610e736119b2565b6020026020010151856000856110a7565b610ef1836001830381518110610e9c57610e9c6119b2565b6020026020010151600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610f8c90919063ffffffff16565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610e4f565b50505050565b60008080526020829052604090205460609060a081901c67ffffffffffffffff811115610f4e57610f4e6119e1565b604051908082528060200260200182016040528015610f77578160200160208202803683370190505b509150610f85838383611403565b5050919050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600183016020526040812054808203610fc5576000915050610600565b60008080526020859052604090205460a01c811015611071576000808052602085905260408082205460a01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182528120549050611047857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8401836114ec565b73ffffffffffffffffffffffffffffffffffffffff16600090815260018501602052604090208190555b61107a8461159e565b505073ffffffffffffffffffffffffffffffffffffffff1660009081526001918201602052604081205590565b604080517f7a1f1aa900000000000000000000000000000000000000000000000000000000808252600482018690526024820185905260448201849052917f1c26714c00000000000000000000000000000000000000000000000000000000917f0000000000000000000000000000000000000000000000000000000000000000918290603f5a02041015611140578260005260046000fd5b60008060648360008c87f1505050505050505050565b600561116181611660565b60008211801561119d57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b156113895773ffffffffffffffffffffffffffffffffffffffff841660009081526006602052604081206111d090610f1f565b73ffffffffffffffffffffffffffffffffffffffff851660009081526006602052604081209192509061120290610f1f565b825181519192509060005b8281101561130f576000858281518110611229576112296119b2565b6020026020010151905060005b838110156112f157858181518110611250576112506119b2565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112e957611296828c8c8c6110a7565b60008682815181106112aa576112aa6119b2565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506112f1565b600101611236565b83810361130557611305828c60008c6110a7565b505060010161120d565b5060005b8181101561138357600084828151811061132f5761132f6119b2565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461137a5761137a8160008b8b6110a7565b50600101611313565b50505050505b60018155610f19565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600183016020526040812054156113c757506000610600565b6113d183836116c0565b73ffffffffffffffffffffffffffffffffffffffff929092166000908152600193840160205260409020919091555090565b815160609060a083901c90811115611447576040517ff9a99b2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156114e3578284600081518110611461576114616119b2565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260015b818110156114e15760008181526020879052604090205485518690839081106114b4576114b46119b2565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101611489565b505b50919392505050565b60008080526020849052604090205460a01c808310611537576040517f4e23d03500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260000361157157600080805260208590526040902060a082901b73ffffffffffffffffffffffffffffffffffffffff8416179055610f19565b600083815260208590526040902073ffffffffffffffffffffffffffffffffffffffff8316905550505050565b6000808052602082905260408120549060a082901c908190036115ed576040517f06a2af9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810160009081526020849052604081205560018111156108c65760008080526020849052604090207fffffffffffffffffffffffff000000000000000000000000000000000000000083019055505050565b80547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016116ba576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b60008080526020839052604081205460a081901c80830361173557600080805260208690526040902074ffffffffffffffffffffffffffffffffffffffffff7401000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff87160116905561177d565b6000808052602086905260408082207401000000000000000000000000000000000000000085019055828252902073ffffffffffffffffffffffffffffffffffffffff851690555b600101949350505050565b600060208083528351808285015260005b818110156117b557858101830151858201604001528201611799565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461181857600080fd5b919050565b6000806040838503121561183057600080fd5b611839836117f4565b946020939093013593505050565b60006020828403121561185957600080fd5b6105fd826117f4565b60008060006060848603121561187757600080fd5b611880846117f4565b925061188e602085016117f4565b9150604084013590509250925092565b600080604083850312156118b157600080fd5b6118ba836117f4565b91506118c8602084016117f4565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561191f57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016118ed565b50909695505050505050565b600181811c9082168061193f57607f821691505b60208210810361067f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b80820180821115610600577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212202b26910d92e7e5941f6887645e91ecf6722d321d4fcc0021674fa85b280109af64736f6c63430008110033a2646970667358221220b45049567294110be0ad7d86a448f5ebc125ff725ea46c25bfc25d92d75ad5d164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "votingPowerOf(address)": {
        "details": "we assume that voting power is a function of balance that preserves order"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2654,
        "contract": "contracts/RewardableDelegationPodWithVotingPower.sol:RewardableDelegationPodWithVotingPower",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2660,
        "contract": "contracts/RewardableDelegationPodWithVotingPower.sol:RewardableDelegationPodWithVotingPower",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2662,
        "contract": "contracts/RewardableDelegationPodWithVotingPower.sol:RewardableDelegationPodWithVotingPower",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2664,
        "contract": "contracts/RewardableDelegationPodWithVotingPower.sol:RewardableDelegationPodWithVotingPower",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2666,
        "contract": "contracts/RewardableDelegationPodWithVotingPower.sol:RewardableDelegationPodWithVotingPower",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 19,
        "contract": "contracts/RewardableDelegationPodWithVotingPower.sol:RewardableDelegationPodWithVotingPower",
        "label": "delegated",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 465,
        "contract": "contracts/RewardableDelegationPodWithVotingPower.sol:RewardableDelegationPodWithVotingPower",
        "label": "registration",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_contract(IDelegatedShare)752)"
      },
      {
        "astId": 469,
        "contract": "contracts/RewardableDelegationPodWithVotingPower.sol:RewardableDelegationPodWithVotingPower",
        "label": "defaultFarms",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IDelegatedShare)752": {
        "encoding": "inplace",
        "label": "contract IDelegatedShare",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_contract(IDelegatedShare)752)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IDelegatedShare)",
        "numberOfBytes": "32",
        "value": "t_contract(IDelegatedShare)752"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}