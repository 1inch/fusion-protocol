{
  "address": "0x761CB6aF627084a33294cF463FF9A7366C2eA92D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVotable",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "resolverThreshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "whitelistLimit_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceLessThanThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OutputArrayTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PopFromEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "promoter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "promotee",
          "type": "address"
        }
      ],
      "name": "Promotion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resolverThreshold",
          "type": "uint256"
        }
      ],
      "name": "ResolverThresholdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "Unregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "whitelistLimit",
          "type": "uint256"
        }
      ],
      "name": "WhitelistLimitSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "clean",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "getPromotees",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "promotees",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "promotee",
          "type": "address"
        }
      ],
      "name": "promote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "promotions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolverThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resolverThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setResolverThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "whitelistLimit_",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IVotable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x27e7e4707ec1d65e4cac61d4623601c291e4d7d38d6c0591e750fdf5b9a788d9",
  "receipt": {
    "to": null,
    "from": "0x7c38A7A466f82863BE4e35A5854Ffb6079ff1A40",
    "contractAddress": "0x761CB6aF627084a33294cF463FF9A7366C2eA92D",
    "transactionIndex": 89,
    "gasUsed": "1487257",
    "logsBloom": "0x00000000000000000000000000020000000000000000000000800000000000000000000000000200000000000000080000000000000000000000000000000000000000000000010000000000000000000001000000000100000000000000000000400000020000000000000000000800000000000000000000000000000000402800000000000000000002000000000000040000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7eb76a30d6b6070fbc1cd62cb02f543f01675e52b5fcaba9b8defbda4b2862cd",
    "transactionHash": "0x27e7e4707ec1d65e4cac61d4623601c291e4d7d38d6c0591e750fdf5b9a788d9",
    "logs": [
      {
        "transactionIndex": 89,
        "blockNumber": 24037855,
        "transactionHash": "0x27e7e4707ec1d65e4cac61d4623601c291e4d7d38d6c0591e750fdf5b9a788d9",
        "address": "0x761CB6aF627084a33294cF463FF9A7366C2eA92D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007c38a7a466f82863be4e35a5854ffb6079ff1a40"
        ],
        "data": "0x",
        "logIndex": 252,
        "blockHash": "0x7eb76a30d6b6070fbc1cd62cb02f543f01675e52b5fcaba9b8defbda4b2862cd"
      },
      {
        "transactionIndex": 89,
        "blockNumber": 24037855,
        "transactionHash": "0x27e7e4707ec1d65e4cac61d4623601c291e4d7d38d6c0591e750fdf5b9a788d9",
        "address": "0x761CB6aF627084a33294cF463FF9A7366C2eA92D",
        "topics": [
          "0xb51788a67c010f6b744a03da1a32541fab962da32125c5019bb804e24fc61a14"
        ],
        "data": "0x000000000000000000000000000000000000000000000000016345785d8a0000",
        "logIndex": 253,
        "blockHash": "0x7eb76a30d6b6070fbc1cd62cb02f543f01675e52b5fcaba9b8defbda4b2862cd"
      },
      {
        "transactionIndex": 89,
        "blockNumber": 24037855,
        "transactionHash": "0x27e7e4707ec1d65e4cac61d4623601c291e4d7d38d6c0591e750fdf5b9a788d9",
        "address": "0x761CB6aF627084a33294cF463FF9A7366C2eA92D",
        "topics": [
          "0xafde81f0daa09442c2fecab15f71e1abbb253d0cd187744a78d180f0e675493c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000005",
        "logIndex": 254,
        "blockHash": "0x7eb76a30d6b6070fbc1cd62cb02f543f01675e52b5fcaba9b8defbda4b2862cd"
      }
    ],
    "blockNumber": 24037855,
    "cumulativeGasUsed": "13409823",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6b0905BAe84443A7DACEfA910a64DCA811Cbf453",
    "100000000000000000",
    "5"
  ],
  "numDeployments": 1,
  "solcInputHash": "dd84ca0b270bfd2388f56fc3484732b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVotable\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resolverThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whitelistLimit_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceLessThanThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutputArrayTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PopFromEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promoter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promotee\",\"type\":\"address\"}],\"name\":\"Promotion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resolverThreshold\",\"type\":\"uint256\"}],\"name\":\"ResolverThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Unregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"whitelistLimit\",\"type\":\"uint256\"}],\"name\":\"WhitelistLimitSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"clean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getPromotees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"promotees\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"promotee\",\"type\":\"address\"}],\"name\":\"promote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"promotions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolverThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resolverThreshold_\",\"type\":\"uint256\"}],\"name\":\"setResolverThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whitelistLimit_\",\"type\":\"uint256\"}],\"name\":\"setWhitelistLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IVotable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Contract with trades resolvers whitelist\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WhitelistRegistry.sol\":\"WhitelistRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@1inch/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10105446e709abf11b13721a516ffa24d3c5bec39c7925a367968a6a7519579f\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IERC20MetadataUppercase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\ninterface IERC20MetadataUppercase {\\n    function NAME() external view returns (string memory); // solhint-disable-line func-name-mixedcase\\n\\n    function SYMBOL() external view returns (string memory); // solhint-disable-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x4c991ad35b1c2e52accbdebd652f4e7ca394600aff92485ac8298981f9735018\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/AddressArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\n/// @title Library that implements address array on mapping, stores array length at 0 index.\\nlibrary AddressArray {\\n    error IndexOutOfBounds();\\n    error PopFromEmptyArray();\\n    error OutputArrayTooSmall();\\n\\n    /// @dev Data struct containing raw mapping.\\n    struct Data {\\n        mapping(uint256 => uint256) _raw;\\n    }\\n\\n    /// @dev Length of array.\\n    function length(Data storage self) internal view returns (uint256) {\\n        return self._raw[0] >> 160;\\n    }\\n\\n    /// @dev Returns data item from `self` storage at `i`.\\n    function at(Data storage self, uint256 i) internal view returns (address) {\\n        return address(uint160(self._raw[i]));\\n    }\\n\\n    /// @dev Returns list of addresses from storage `self`.\\n    function get(Data storage self) internal view returns (address[] memory arr) {\\n        uint256 lengthAndFirst = self._raw[0];\\n        arr = new address[](lengthAndFirst >> 160);\\n        _get(self, arr, lengthAndFirst);\\n    }\\n\\n    /// @dev Puts list of addresses from `self` storage into `output` array.\\n    function get(Data storage self, address[] memory output) internal view returns (address[] memory) {\\n        return _get(self, output, self._raw[0]);\\n    }\\n\\n    function _get(\\n        Data storage self,\\n        address[] memory output,\\n        uint256 lengthAndFirst\\n    ) private view returns (address[] memory) {\\n        uint256 len = lengthAndFirst >> 160;\\n        if (len > output.length) revert OutputArrayTooSmall();\\n        if (len > 0) {\\n            output[0] = address(uint160(lengthAndFirst));\\n            unchecked {\\n                for (uint256 i = 1; i < len; i++) {\\n                    output[i] = address(uint160(self._raw[i]));\\n                }\\n            }\\n        }\\n        return output;\\n    }\\n\\n    /// @dev Array push back `account` operation on storage `self`.\\n    function push(Data storage self, address account) internal returns (uint256) {\\n        unchecked {\\n            uint256 lengthAndFirst = self._raw[0];\\n            uint256 len = lengthAndFirst >> 160;\\n            if (len == 0) {\\n                self._raw[0] = (1 << 160) + uint160(account);\\n            } else {\\n                self._raw[0] = lengthAndFirst + (1 << 160);\\n                self._raw[len] = uint160(account);\\n            }\\n            return len + 1;\\n        }\\n    }\\n\\n    /// @dev Array pop back operation for storage `self`.\\n    function pop(Data storage self) internal {\\n        unchecked {\\n            uint256 lengthAndFirst = self._raw[0];\\n            uint256 len = lengthAndFirst >> 160;\\n            if (len == 0) revert PopFromEmptyArray();\\n            self._raw[len - 1] = 0;\\n            if (len > 1) {\\n                self._raw[0] = lengthAndFirst - (1 << 160);\\n            }\\n        }\\n    }\\n\\n    /// @dev Set element for storage `self` at `index` to `account`.\\n    function set(\\n        Data storage self,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        uint256 len = length(self);\\n        if (index >= len) revert IndexOutOfBounds();\\n\\n        if (index == 0) {\\n            self._raw[0] = (len << 160) | uint160(account);\\n        } else {\\n            self._raw[index] = uint160(account);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x721a3cbb8590214dc6cf6cacaabdb7b78b0e2de93cf308230eea800b546b2bff\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"./AddressArray.sol\\\";\\n\\n/** @title Library that is using AddressArray library for AddressArray.Data\\n * and allows Set operations on address storage data:\\n * 1. add\\n * 2. remove\\n * 3. contains\\n */\\nlibrary AddressSet {\\n    using AddressArray for AddressArray.Data;\\n\\n    /** @dev Data struct from AddressArray.Data items\\n     * and lookup mapping address => index in data array.\\n     */\\n    struct Data {\\n        AddressArray.Data items;\\n        mapping(address => uint256) lookup;\\n    }\\n\\n    /// @dev Length of data storage.\\n    function length(Data storage s) internal view returns (uint256) {\\n        return s.items.length();\\n    }\\n\\n    /// @dev Returns data item from `s` storage at `index`.\\n    function at(Data storage s, uint256 index) internal view returns (address) {\\n        return s.items.at(index);\\n    }\\n\\n    /// @dev Returns true if storage `s` has `item`.\\n    function contains(Data storage s, address item) internal view returns (bool) {\\n        return s.lookup[item] != 0;\\n    }\\n\\n    /// @dev Adds `item` into storage `s` and returns true if successful.\\n    function add(Data storage s, address item) internal returns (bool) {\\n        if (s.lookup[item] > 0) {\\n            return false;\\n        }\\n        s.lookup[item] = s.items.push(item);\\n        return true;\\n    }\\n\\n    /// @dev Removes `item` from storage `s` and returns true if successful.\\n    function remove(Data storage s, address item) internal returns (bool) {\\n        uint256 index = s.lookup[item];\\n        if (index == 0) {\\n            return false;\\n        }\\n        if (index < s.items.length()) {\\n            unchecked {\\n                address lastItem = s.items.at(s.items.length() - 1);\\n                s.items.set(index - 1, lastItem);\\n                s.lookup[lastItem] = index;\\n            }\\n        }\\n        s.items.pop();\\n        delete s.lookup[item];\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x06af71720083e9d8d3e7b9994695f6867e676a4fa89f1a8c294f5fce32b2da12\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x990c989e0ffba370a27b90b917a1cf86db79e370b9ba2b0f9076895b232744f8\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/// @title Implements efficient safe methods for ERC20 interface.\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /// @dev If `approve(from, to, amount)` fails, try to `approve(from, to, 0)` before retry.\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev Allowance increase with safe math check.\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /// @dev Allowance decrease with safe math check.\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    /// @dev Calls either ERC20 or Dai `permit` for `token`, if unsuccessful forwards revert from external call.\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool) {\\n        if (permit.length == 32 * 7) {\\n            return _makeCalldataCall(token, IERC20Permit.permit.selector, permit);\\n        }\\n        if (permit.length == 32 * 8) {\\n            return _makeCalldataCall(token, IDaiLikePermit.permit.selector, permit);\\n        }\\n        revert SafePermitBadLength();\\n    }\\n\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function _makeCalldataCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        bytes calldata args\\n    ) private returns (bool success) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let len := add(4, args.length)\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            calldatacopy(add(data, 0x04), args.offset, args.length)\\n            success := call(gas(), token, 0, data, len, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x11014aec6238c642e58667a3ace2bb16a165bfe7bb475047c971bafdb1da92d0\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/StringUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\n/// @title Library with gas-efficient string operations\\nlibrary StringUtil {\\n    function toHex(uint256 value) internal pure returns (string memory) {\\n        return toHex(abi.encodePacked(value));\\n    }\\n\\n    function toHex(address value) internal pure returns (string memory) {\\n        return toHex(abi.encodePacked(value));\\n    }\\n\\n    /// @dev this is the assembly adaptation of highly optimized toHex16 code from Mikhail Vladimirov\\n    /// https://stackoverflow.com/a/69266989\\n    function toHex(bytes memory data) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            function _toHex16(input) -> output {\\n                output := or(\\n                    and(input, 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000),\\n                    shr(64, and(input, 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000))\\n                )\\n                output := or(\\n                    and(output, 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000),\\n                    shr(32, and(output, 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000))\\n                )\\n                output := or(\\n                    and(output, 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000),\\n                    shr(16, and(output, 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000))\\n                )\\n                output := or(\\n                    and(output, 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000),\\n                    shr(8, and(output, 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000))\\n                )\\n                output := or(\\n                    shr(4, and(output, 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000)),\\n                    shr(8, and(output, 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00))\\n                )\\n                output := add(\\n                    add(0x3030303030303030303030303030303030303030303030303030303030303030, output),\\n                    mul(\\n                        and(\\n                            shr(4, add(output, 0x0606060606060606060606060606060606060606060606060606060606060606)),\\n                            0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F\\n                        ),\\n                        7 // Change 7 to 39 for lower case output\\n                    )\\n                )\\n            }\\n\\n            result := mload(0x40)\\n            let length := mload(data)\\n            let resultLength := shl(1, length)\\n            let toPtr := add(result, 0x22) // 32 bytes for length + 2 bytes for '0x'\\n            mstore(0x40, add(toPtr, resultLength)) // move free memory pointer\\n            mstore(add(result, 2), 0x3078) // 0x3078 is right aligned so we write to `result + 2`\\n            // to store the last 2 bytes in the beginning of the string\\n            mstore(result, add(resultLength, 2)) // extra 2 bytes for '0x'\\n\\n            for {\\n                let fromPtr := add(data, 0x20)\\n                let endPtr := add(fromPtr, length)\\n            } lt(fromPtr, endPtr) {\\n                fromPtr := add(fromPtr, 0x20)\\n            } {\\n                let rawData := mload(fromPtr)\\n                let hexData := _toHex16(rawData)\\n                mstore(toPtr, hexData)\\n                toPtr := add(toPtr, 0x20)\\n                hexData := _toHex16(shl(128, rawData))\\n                mstore(toPtr, hexData)\\n                toPtr := add(toPtr, 0x20)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x321975807ed40e33789614b6f9df80748a6d128962ac9af863af50327a0580bf\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/UniERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IERC20MetadataUppercase.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./StringUtil.sol\\\";\\n\\n/// @title Library, which allows usage of ETH as ERC20 and ERC20 itself. Uses SafeERC20 library for ERC20 interface.\\nlibrary UniERC20 {\\n    using SafeERC20 for IERC20;\\n\\n    error InsufficientBalance();\\n    error ApproveCalledOnETH();\\n    error NotEnoughValue();\\n    error FromIsNotSender();\\n    error ToIsNotThis();\\n    error ETHTransferFailed();\\n\\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n    IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    IERC20 private constant _ZERO_ADDRESS = IERC20(address(0));\\n\\n    /// @dev Returns true if `token` is ETH.\\n    function isETH(IERC20 token) internal pure returns (bool) {\\n        return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\n    }\\n\\n    /// @dev Returns `account` ERC20 `token` balance.\\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return account.balance;\\n        } else {\\n            return token.balanceOf(account);\\n        }\\n    }\\n\\n    /// @dev `token` transfer `to` `amount`.\\n    /// Note that this function does nothing in case of zero amount.\\n    function uniTransfer(\\n        IERC20 token,\\n        address payable to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                if (address(this).balance < amount) revert InsufficientBalance();\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool success, ) = to.call{value: amount, gas: _RAW_CALL_GAS_LIMIT}(\\\"\\\");\\n                if (!success) revert ETHTransferFailed();\\n            } else {\\n                token.safeTransfer(to, amount);\\n            }\\n        }\\n    }\\n\\n    /// @dev `token` transfer `from` `to` `amount`.\\n    /// Note that this function does nothing in case of zero amount.\\n    function uniTransferFrom(\\n        IERC20 token,\\n        address payable from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                if (msg.value < amount) revert NotEnoughValue();\\n                if (from != msg.sender) revert FromIsNotSender();\\n                if (to != address(this)) revert ToIsNotThis();\\n                if (msg.value > amount) {\\n                    // Return remainder if exist\\n                    unchecked {\\n                        // solhint-disable-next-line avoid-low-level-calls\\n                        (bool success, ) = from.call{value: msg.value - amount, gas: _RAW_CALL_GAS_LIMIT}(\\\"\\\");\\n                        if (!success) revert ETHTransferFailed();\\n                    }\\n                }\\n            } else {\\n                token.safeTransferFrom(from, to, amount);\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `token` symbol from ERC20 metadata.\\n    function uniSymbol(IERC20 token) internal view returns (string memory) {\\n        return _uniDecode(token, IERC20Metadata.symbol.selector, IERC20MetadataUppercase.SYMBOL.selector);\\n    }\\n\\n    /// @dev Returns `token` name from ERC20 metadata.\\n    function uniName(IERC20 token) internal view returns (string memory) {\\n        return _uniDecode(token, IERC20Metadata.name.selector, IERC20MetadataUppercase.NAME.selector);\\n    }\\n\\n    /// @dev Reverts if `token` is ETH, otherwise performs ERC20 forceApprove.\\n    function uniApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (isETH(token)) revert ApproveCalledOnETH();\\n\\n        token.forceApprove(to, amount);\\n    }\\n\\n    /// @dev 20K gas is provided to account for possible implementations of name/symbol\\n    /// (token implementation might be behind proxy or store the value in storage)\\n    function _uniDecode(\\n        IERC20 token,\\n        bytes4 lowerCaseSelector,\\n        bytes4 upperCaseSelector\\n    ) private view returns (string memory result) {\\n        if (isETH(token)) {\\n            return \\\"ETH\\\";\\n        }\\n\\n        (bool success, bytes memory data) = address(token).staticcall{gas: 20000}(\\n            abi.encodeWithSelector(lowerCaseSelector)\\n        );\\n        if (!success) {\\n            (success, data) = address(token).staticcall{gas: 20000}(abi.encodeWithSelector(upperCaseSelector));\\n        }\\n\\n        if (success && data.length >= 0x40) {\\n            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\\n            /*\\n                return data is padded up to 32 bytes with ABI encoder also sometimes\\n                there is extra 32 bytes of zeros padded in the end:\\n                https://github.com/ethereum/solidity/issues/10170\\n                because of that we can't check for equality and instead check\\n                that overall data length is greater or equal than string length + extra 64 bytes\\n            */\\n            if (offset == 0x20 && data.length >= 0x40 + len) {\\n                /// @solidity memory-safe-assembly\\n                assembly { // solhint-disable-line no-inline-assembly\\n                    result := add(data, 0x40)\\n                }\\n                return result;\\n            }\\n        }\\n        if (success && data.length == 32) {\\n            uint256 len = 0;\\n            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\\n                unchecked {\\n                    len++;\\n                }\\n            }\\n\\n            if (len > 0) {\\n                /// @solidity memory-safe-assembly\\n                assembly { // solhint-disable-line no-inline-assembly\\n                    mstore(data, len)\\n                }\\n                return string(data);\\n            }\\n        }\\n\\n        return StringUtil.toHex(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xd522fae89807f76121fbd4bdac8c6c8c5ba595a407494116b54061c054ed9a87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/WhitelistRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@1inch/solidity-utils/contracts/libraries/UniERC20.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/AddressSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IVotable.sol\\\";\\nimport \\\"./helpers/VotingPowerCalculator.sol\\\";\\n\\n/// @title Contract with trades resolvers whitelist\\ncontract WhitelistRegistry is Ownable {\\n    using UniERC20 for IERC20;\\n    using AddressSet for AddressSet.Data;\\n    using AddressArray for AddressArray.Data;\\n\\n    error BalanceLessThanThreshold();\\n    error NotEnoughBalance();\\n    error AlreadyRegistered();\\n    error NotWhitelisted();\\n\\n    event Registered(address addr);\\n    event Unregistered(address addr);\\n    event ResolverThresholdSet(uint256 resolverThreshold);\\n    event WhitelistLimitSet(uint256 whitelistLimit);\\n    event Promotion(address promoter, uint256 chainId, address promotee);\\n\\n    IVotable public immutable token;\\n\\n    mapping(address => mapping(uint256 => address)) public promotions;\\n    uint256 public resolverThreshold;\\n    uint256 public whitelistLimit;\\n\\n    AddressSet.Data private _whitelist;\\n\\n    constructor(\\n        IVotable token_,\\n        uint256 resolverThreshold_,\\n        uint256 whitelistLimit_\\n    ) {\\n        token = token_;\\n        _setResolverThreshold(resolverThreshold_);\\n        _setWhitelistLimit(whitelistLimit_);\\n    }\\n\\n    function rescueFunds(IERC20 token_, uint256 amount) external onlyOwner {\\n        token_.uniTransfer(payable(msg.sender), amount);\\n    }\\n\\n    function setResolverThreshold(uint256 resolverThreshold_) external onlyOwner {\\n        _setResolverThreshold(resolverThreshold_);\\n    }\\n\\n    function setWhitelistLimit(uint256 whitelistLimit_) external onlyOwner {\\n        uint256 whitelistLength = _whitelist.length();\\n        if (whitelistLimit_ < whitelistLength) {\\n            _shrinkPoorest(_whitelist, whitelistLength - whitelistLimit_);\\n        }\\n        _setWhitelistLimit(whitelistLimit_);\\n    }\\n\\n    function register() external {\\n        if (token.votingPowerOf(msg.sender) < resolverThreshold) revert BalanceLessThanThreshold();\\n        uint256 whitelistLength = _whitelist.length();\\n        if (whitelistLength == whitelistLimit) {\\n            address minResolver = msg.sender;\\n            uint256 minBalance = token.balanceOf(msg.sender);\\n            for (uint256 i = 0; i < whitelistLength; ++i) {\\n                address curWhitelisted = _whitelist.at(i);\\n                uint256 balance = token.balanceOf(curWhitelisted);\\n                if (balance < minBalance) {\\n                    minResolver = curWhitelisted;\\n                    minBalance = balance;\\n                }\\n            }\\n            if (minResolver == msg.sender) revert NotEnoughBalance();\\n            _removeFromWhitelist(minResolver);\\n        }\\n        if (!_whitelist.add(msg.sender)) revert AlreadyRegistered();\\n        emit Registered(msg.sender);\\n    }\\n\\n    function promote(uint256 chainId, address promotee) external {\\n        promotions[msg.sender][chainId] = promotee;\\n        emit Promotion(msg.sender, chainId, promotee);\\n    }\\n\\n    function clean() external {\\n        uint256 whitelistLength = _whitelist.length();\\n        unchecked {\\n            for (uint256 i = 0; i < whitelistLength; ) {\\n                address curWhitelisted = _whitelist.at(i);\\n                if (token.votingPowerOf(curWhitelisted) < resolverThreshold) {\\n                    _removeFromWhitelist(curWhitelisted);\\n                    whitelistLength--;\\n                } else {\\n                    i++;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getWhitelist() external view returns (address[] memory) {\\n        return _whitelist.items.get();\\n    }\\n\\n    function getPromotees(uint256 chainId) external view returns (address[] memory promotees) {\\n        promotees = _whitelist.items.get();\\n        unchecked {\\n            uint256 len = promotees.length;\\n            for (uint256 i = 0; i < len; ++i) {\\n                promotees[i] = promotions[promotees[i]][chainId];\\n            }\\n        }\\n    }\\n\\n    function _shrinkPoorest(AddressSet.Data storage set, uint256 size) private {\\n        uint256 richestIndex = 0;\\n        address[] memory addresses = set.items.get();\\n        uint256 addressesLength = addresses.length;\\n        uint256[] memory balances = new uint256[](addressesLength);\\n        for (uint256 i = 0; i < addressesLength; i++) {\\n            balances[i] = token.balanceOf(addresses[i]);\\n            if (balances[i] > balances[richestIndex]) {\\n                richestIndex = i;\\n            }\\n        }\\n\\n        for (uint256 i = size; i < addressesLength; i++) {\\n            if (balances[i] <= balances[richestIndex]) {\\n                // Swap i-th and richest-th elements\\n                (addresses[i], addresses[richestIndex]) = (addresses[richestIndex], addresses[i]);\\n                (balances[i], balances[richestIndex]) = (balances[richestIndex], balances[i]);\\n\\n                // Find new richest in first size elements\\n                richestIndex = 0;\\n                for (uint256 j = 1; j < size; j++) {\\n                    if (balances[j] > balances[richestIndex]) {\\n                        richestIndex = j;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // Remove poorest elements from set\\n        for (uint256 i = 0; i < size; i++) {\\n            _removeFromWhitelist(addresses[i]);\\n        }\\n    }\\n\\n    function _setResolverThreshold(uint256 resolverThreshold_) private {\\n        resolverThreshold = resolverThreshold_;\\n        emit ResolverThresholdSet(resolverThreshold_);\\n    }\\n\\n    function _setWhitelistLimit(uint256 whitelistLimit_) private {\\n        whitelistLimit = whitelistLimit_;\\n        emit WhitelistLimitSet(whitelistLimit_);\\n    }\\n\\n    function _removeFromWhitelist(address account) private {\\n        _whitelist.remove(account);\\n        emit Unregistered(account);\\n    }\\n}\\n\",\"keccak256\":\"0x5340ad413a90047f1eaafc361e784ba224d1757cf0f3825028c23c858735892d\",\"license\":\"MIT\"},\"contracts/helpers/VotingPowerCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ncontract VotingPowerCalculator {\\n    uint256 public immutable origin;\\n    uint256 public immutable expBase;\\n\\n    uint256 private immutable _expTable0;\\n    uint256 private immutable _expTable1;\\n    uint256 private immutable _expTable2;\\n    uint256 private immutable _expTable3;\\n    uint256 private immutable _expTable4;\\n    uint256 private immutable _expTable5;\\n    uint256 private immutable _expTable6;\\n    uint256 private immutable _expTable7;\\n    uint256 private immutable _expTable8;\\n    uint256 private immutable _expTable9;\\n    uint256 private immutable _expTable10;\\n    uint256 private immutable _expTable11;\\n    uint256 private immutable _expTable12;\\n    uint256 private immutable _expTable13;\\n    uint256 private immutable _expTable14;\\n    uint256 private immutable _expTable15;\\n    uint256 private immutable _expTable16;\\n    uint256 private immutable _expTable17;\\n    uint256 private immutable _expTable18;\\n    uint256 private immutable _expTable19;\\n    uint256 private immutable _expTable20;\\n    uint256 private immutable _expTable21;\\n    uint256 private immutable _expTable22;\\n    uint256 private immutable _expTable23;\\n    uint256 private immutable _expTable24;\\n    uint256 private immutable _expTable25;\\n    uint256 private immutable _expTable26;\\n    uint256 private immutable _expTable27;\\n    uint256 private immutable _expTable28;\\n    uint256 private immutable _expTable29;\\n\\n    constructor(uint256 expBase_, uint256 origin_) {\\n        origin = origin_;\\n        expBase = expBase_;\\n        _expTable0 = expBase_;\\n        _expTable1 = (_expTable0 * _expTable0) / 1e18;\\n        _expTable2 = (_expTable1 * _expTable1) / 1e18;\\n        _expTable3 = (_expTable2 * _expTable2) / 1e18;\\n        _expTable4 = (_expTable3 * _expTable3) / 1e18;\\n        _expTable5 = (_expTable4 * _expTable4) / 1e18;\\n        _expTable6 = (_expTable5 * _expTable5) / 1e18;\\n        _expTable7 = (_expTable6 * _expTable6) / 1e18;\\n        _expTable8 = (_expTable7 * _expTable7) / 1e18;\\n        _expTable9 = (_expTable8 * _expTable8) / 1e18;\\n        _expTable10 = (_expTable9 * _expTable9) / 1e18;\\n        _expTable11 = (_expTable10 * _expTable10) / 1e18;\\n        _expTable12 = (_expTable11 * _expTable11) / 1e18;\\n        _expTable13 = (_expTable12 * _expTable12) / 1e18;\\n        _expTable14 = (_expTable13 * _expTable13) / 1e18;\\n        _expTable15 = (_expTable14 * _expTable14) / 1e18;\\n        _expTable16 = (_expTable15 * _expTable15) / 1e18;\\n        _expTable17 = (_expTable16 * _expTable16) / 1e18;\\n        _expTable18 = (_expTable17 * _expTable17) / 1e18;\\n        _expTable19 = (_expTable18 * _expTable18) / 1e18;\\n        _expTable20 = (_expTable19 * _expTable19) / 1e18;\\n        _expTable21 = (_expTable20 * _expTable20) / 1e18;\\n        _expTable22 = (_expTable21 * _expTable21) / 1e18;\\n        _expTable23 = (_expTable22 * _expTable22) / 1e18;\\n        _expTable24 = (_expTable23 * _expTable23) / 1e18;\\n        _expTable25 = (_expTable24 * _expTable24) / 1e18;\\n        _expTable26 = (_expTable25 * _expTable25) / 1e18;\\n        _expTable27 = (_expTable26 * _expTable26) / 1e18;\\n        _expTable28 = (_expTable27 * _expTable27) / 1e18;\\n        _expTable29 = (_expTable28 * _expTable28) / 1e18;\\n    }\\n\\n    function _votingPowerAt(uint256 balance, uint256 timestamp) internal view returns (uint256 votingPower) {\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            votingPower = balance;\\n            if (t & 0x01 != 0) {\\n                votingPower = (votingPower * _expTable0) / 1e18;\\n            }\\n            if (t & 0x02 != 0) {\\n                votingPower = (votingPower * _expTable1) / 1e18;\\n            }\\n            if (t & 0x04 != 0) {\\n                votingPower = (votingPower * _expTable2) / 1e18;\\n            }\\n            if (t & 0x08 != 0) {\\n                votingPower = (votingPower * _expTable3) / 1e18;\\n            }\\n            if (t & 0x10 != 0) {\\n                votingPower = (votingPower * _expTable4) / 1e18;\\n            }\\n            if (t & 0x20 != 0) {\\n                votingPower = (votingPower * _expTable5) / 1e18;\\n            }\\n            if (t & 0x40 != 0) {\\n                votingPower = (votingPower * _expTable6) / 1e18;\\n            }\\n            if (t & 0x80 != 0) {\\n                votingPower = (votingPower * _expTable7) / 1e18;\\n            }\\n            if (t & 0x100 != 0) {\\n                votingPower = (votingPower * _expTable8) / 1e18;\\n            }\\n            if (t & 0x200 != 0) {\\n                votingPower = (votingPower * _expTable9) / 1e18;\\n            }\\n            if (t & 0x400 != 0) {\\n                votingPower = (votingPower * _expTable10) / 1e18;\\n            }\\n            if (t & 0x800 != 0) {\\n                votingPower = (votingPower * _expTable11) / 1e18;\\n            }\\n            if (t & 0x1000 != 0) {\\n                votingPower = (votingPower * _expTable12) / 1e18;\\n            }\\n            if (t & 0x2000 != 0) {\\n                votingPower = (votingPower * _expTable13) / 1e18;\\n            }\\n            if (t & 0x4000 != 0) {\\n                votingPower = (votingPower * _expTable14) / 1e18;\\n            }\\n            if (t & 0x8000 != 0) {\\n                votingPower = (votingPower * _expTable15) / 1e18;\\n            }\\n            if (t & 0x10000 != 0) {\\n                votingPower = (votingPower * _expTable16) / 1e18;\\n            }\\n            if (t & 0x20000 != 0) {\\n                votingPower = (votingPower * _expTable17) / 1e18;\\n            }\\n            if (t & 0x40000 != 0) {\\n                votingPower = (votingPower * _expTable18) / 1e18;\\n            }\\n            if (t & 0x80000 != 0) {\\n                votingPower = (votingPower * _expTable19) / 1e18;\\n            }\\n            if (t & 0x100000 != 0) {\\n                votingPower = (votingPower * _expTable20) / 1e18;\\n            }\\n            if (t & 0x200000 != 0) {\\n                votingPower = (votingPower * _expTable21) / 1e18;\\n            }\\n            if (t & 0x400000 != 0) {\\n                votingPower = (votingPower * _expTable22) / 1e18;\\n            }\\n            if (t & 0x800000 != 0) {\\n                votingPower = (votingPower * _expTable23) / 1e18;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                votingPower = (votingPower * _expTable24) / 1e18;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                votingPower = (votingPower * _expTable25) / 1e18;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                votingPower = (votingPower * _expTable26) / 1e18;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                votingPower = (votingPower * _expTable27) / 1e18;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                votingPower = (votingPower * _expTable28) / 1e18;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                votingPower = (votingPower * _expTable29) / 1e18;\\n            }\\n        }\\n        return votingPower;\\n    }\\n\\n    function _balanceAt(uint256 votingPower, uint256 timestamp) internal view returns (uint256 balance) {\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            balance = votingPower;\\n            if (t & 0x01 != 0) {\\n                balance = (balance * 1e18) / _expTable0;\\n            }\\n            if (t & 0x02 != 0) {\\n                balance = (balance * 1e18) / _expTable1;\\n            }\\n            if (t & 0x04 != 0) {\\n                balance = (balance * 1e18) / _expTable2;\\n            }\\n            if (t & 0x08 != 0) {\\n                balance = (balance * 1e18) / _expTable3;\\n            }\\n            if (t & 0x10 != 0) {\\n                balance = (balance * 1e18) / _expTable4;\\n            }\\n            if (t & 0x20 != 0) {\\n                balance = (balance * 1e18) / _expTable5;\\n            }\\n            if (t & 0x40 != 0) {\\n                balance = (balance * 1e18) / _expTable6;\\n            }\\n            if (t & 0x80 != 0) {\\n                balance = (balance * 1e18) / _expTable7;\\n            }\\n            if (t & 0x100 != 0) {\\n                balance = (balance * 1e18) / _expTable8;\\n            }\\n            if (t & 0x200 != 0) {\\n                balance = (balance * 1e18) / _expTable9;\\n            }\\n            if (t & 0x400 != 0) {\\n                balance = (balance * 1e18) / _expTable10;\\n            }\\n            if (t & 0x800 != 0) {\\n                balance = (balance * 1e18) / _expTable11;\\n            }\\n            if (t & 0x1000 != 0) {\\n                balance = (balance * 1e18) / _expTable12;\\n            }\\n            if (t & 0x2000 != 0) {\\n                balance = (balance * 1e18) / _expTable13;\\n            }\\n            if (t & 0x4000 != 0) {\\n                balance = (balance * 1e18) / _expTable14;\\n            }\\n            if (t & 0x8000 != 0) {\\n                balance = (balance * 1e18) / _expTable15;\\n            }\\n            if (t & 0x10000 != 0) {\\n                balance = (balance * 1e18) / _expTable16;\\n            }\\n            if (t & 0x20000 != 0) {\\n                balance = (balance * 1e18) / _expTable17;\\n            }\\n            if (t & 0x40000 != 0) {\\n                balance = (balance * 1e18) / _expTable18;\\n            }\\n            if (t & 0x80000 != 0) {\\n                balance = (balance * 1e18) / _expTable19;\\n            }\\n            if (t & 0x100000 != 0) {\\n                balance = (balance * 1e18) / _expTable20;\\n            }\\n            if (t & 0x200000 != 0) {\\n                balance = (balance * 1e18) / _expTable21;\\n            }\\n            if (t & 0x400000 != 0) {\\n                balance = (balance * 1e18) / _expTable22;\\n            }\\n            if (t & 0x800000 != 0) {\\n                balance = (balance * 1e18) / _expTable23;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                balance = (balance * 1e18) / _expTable24;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                balance = (balance * 1e18) / _expTable25;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                balance = (balance * 1e18) / _expTable26;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                balance = (balance * 1e18) / _expTable27;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                balance = (balance * 1e18) / _expTable28;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                balance = (balance * 1e18) / _expTable29;\\n            }\\n        }\\n        return balance;\\n    }\\n}\\n\",\"keccak256\":\"0x7f1f4ac963bd78843e492dd55745726149a2eb9f73adc8d82131c292a79c868d\",\"license\":\"MIT\"},\"contracts/interfaces/IVotable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVotable is IERC20 {\\n    /// @dev we assume that voting power is a function of balance that preserves order\\n    function votingPowerOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d7bd805a3d022454412a535bfd849b9e364548e77a82fffcd06590681d3d2e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001a8238038062001a8283398101604081905262000034916200012d565b6200003f336200006b565b6001600160a01b0383166080526200005782620000bb565b6200006281620000f7565b50505062000172565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60028190556040518181527fb51788a67c010f6b744a03da1a32541fab962da32125c5019bb804e24fc61a14906020015b60405180910390a150565b60038190556040518181527fafde81f0daa09442c2fecab15f71e1abbb253d0cd187744a78d180f0e675493c90602001620000ec565b6000806000606084860312156200014357600080fd5b83516001600160a01b03811681146200015b57600080fd5b602085015160409095015190969495509392505050565b6080516118d1620001b1600039600081816102410152818161029c0152818161039f015281816104840152818161093c0152610ded01526118d16000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063b55e8ca911610097578063f204bdb911610066578063f204bdb914610216578063f2fde38b14610229578063fc0c546a1461023c578063fc4333cd1461026357600080fd5b8063b55e8ca9146101c8578063d01f63f5146101db578063d2521ae8146101f0578063e5136e941461020357600080fd5b8063302150e5116100d3578063302150e514610186578063715018a61461018f57806378e3214f146101975780638da5cb5b146101aa57600080fd5b80631aa3a008146100fa5780632af05166146101045780632c01097a1461016f575b600080fd5b61010261026b565b005b6101456101123660046116be565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61017860025481565b604051908152602001610166565b61017860035481565b6101026105e7565b6101026101a53660046116be565b6105fb565b60005473ffffffffffffffffffffffffffffffffffffffff16610145565b6101026101d63660046116ea565b610628565b6101e361063c565b6040516101669190611703565b6101026101fe3660046116ea565b61064d565b6101e36102113660046116ea565b610688565b61010261022436600461175d565b610774565b61010261023736600461178d565b610810565b6101457f000000000000000000000000000000000000000000000000000000000000000081565b6101026108c9565b6002546040517fbcc3f3bd0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063bcc3f3bd90602401602060405180830381865afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c91906117aa565b1015610354576040517f63bd63ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061036060046109ed565b9050600354810361056f576040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201819052906000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041f91906117aa565b905060005b83811015610513576000610439600483610a06565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156104cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef91906117aa565b905083811015610500578194508093505b50508061050c906117f2565b9050610424565b503373ffffffffffffffffffffffffffffffffffffffff831603610563576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61056c82610a1d565b50505b61057a600433610a6f565b6105b0576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040513381527f2d3734a8e47ac8316e500ac231c90a6e1848ca2285f40d07eaa52005e4b3a0e9906020015b60405180910390a150565b6105ef610ae0565b6105f96000610b61565b565b610603610ae0565b61062473ffffffffffffffffffffffffffffffffffffffff83163383610bd6565b5050565b610630610ae0565b61063981610ced565b50565b60606106486004610d22565b905090565b610655610ae0565b600061066160046109ed565b90508082101561067f5761067f600461067a848461182a565b610d88565b6106248261111e565b60606106946004610d22565b805190915060005b8181101561076d57600160008483815181106106ba576106ba61183d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168382815181106107405761074061183d565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260010161069c565b5050919050565b33600081815260016020908152604080832086845282529182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558251938452908301859052908201527fb863cf86b291171e4b0332ea12b59af030f98a2c74a6d51effaf1109ae4c7f1e9060600160405180910390a15050565b610818610ae0565b73ffffffffffffffffffffffffffffffffffffffff81166108c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61063981610b61565b60006108d560046109ed565b905060005b818110156106245760006108ef600483610a06565b6002546040517fbcc3f3bd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015292935090917f0000000000000000000000000000000000000000000000000000000000000000169063bcc3f3bd90602401602060405180830381865afa158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a791906117aa565b10156109e0576109b681610a1d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201916109e7565b6001909101905b506108da565b60008080526020829052604081205460a01c5b92915050565b6000818152602083905260408120545b9392505050565b610a28600482611153565b5060405173ffffffffffffffffffffffffffffffffffffffff821681527f75cd6de711483e11488a1cd9b66172abccb9e5c19572f92015a7880f0c8c0edc906020016105dc565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205415610aa457506000610a00565b610aae838361126e565b73ffffffffffffffffffffffffffffffffffffffff929092166000908152600193840160205260409020919091555090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108b7565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8015610ce857610be583611336565b15610cc75780471015610c24576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405160009073ffffffffffffffffffffffffffffffffffffffff84169061138890849084818181858888f193505050503d8060008114610c81576040519150601f19603f3d011682016040523d82523d6000602084013e610c86565b606091505b5050905080610cc1576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b610ce873ffffffffffffffffffffffffffffffffffffffff84168383611389565b505050565b60028190556040518181527fb51788a67c010f6b744a03da1a32541fab962da32125c5019bb804e24fc61a14906020016105dc565b60008080526020829052604090205460609060a081901c67ffffffffffffffff811115610d5157610d5161186c565b604051908082528060200260200182016040528015610d7a578160200160208202803683370190505b50915061076d8383836113eb565b600080610d9484610d22565b805190915060008167ffffffffffffffff811115610db457610db461186c565b604051908082528060200260200182016040528015610ddd578160200160208202803683370190505b50905060005b82811015610f28577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231858381518110610e3957610e3961183d565b60200260200101516040518263ffffffff1660e01b8152600401610e79919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b602060405180830381865afa158015610e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eba91906117aa565b828281518110610ecc57610ecc61183d565b602002602001018181525050818581518110610eea57610eea61183d565b6020026020010151828281518110610f0457610f0461183d565b60200260200101511115610f16578094505b80610f20816117f2565b915050610de3565b50845b828110156110d557818581518110610f4557610f4561183d565b6020026020010151828281518110610f5f57610f5f61183d565b6020026020010151116110c357838581518110610f7e57610f7e61183d565b6020026020010151848281518110610f9857610f9861183d565b6020026020010151858381518110610fb257610fb261183d565b60200260200101868881518110610fcb57610fcb61183d565b73ffffffffffffffffffffffffffffffffffffffff93841660209182029290920101529116905281518290869081106110065761100661183d565b60200260200101518282815181106110205761102061183d565b602002602001015183838151811061103a5761103a61183d565b602002602001018488815181106110535761105361183d565b6020908102919091010191909152526000945060015b868110156110c1578286815181106110835761108361183d565b602002602001015183828151811061109d5761109d61183d565b602002602001015111156110af578095505b806110b9816117f2565b915050611069565b505b806110cd816117f2565b915050610f2b565b5060005b85811015611115576111038482815181106110f6576110f661183d565b6020026020010151610a1d565b8061110d816117f2565b9150506110d9565b50505050505050565b60038190556040518181527fafde81f0daa09442c2fecab15f71e1abbb253d0cd187744a78d180f0e675493c906020016105dc565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205480820361118c576000915050610a00565b60008080526020859052604090205460a01c811015611238576000808052602085905260408082205460a01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018252812054905061120e857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8401836114d4565b73ffffffffffffffffffffffffffffffffffffffff16600090815260018501602052604090208190555b61124184611586565b505073ffffffffffffffffffffffffffffffffffffffff1660009081526001918201602052604081205590565b60008080526020839052604081205460a081901c8083036112e357600080805260208690526040902074ffffffffffffffffffffffffffffffffffffffffff7401000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff87160116905561132b565b6000808052602086905260408082207401000000000000000000000000000000000000000085019055828252902073ffffffffffffffffffffffffffffffffffffffff851690555b600101949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82161580610a00575073ffffffffffffffffffffffffffffffffffffffff821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1492915050565b6113b5837fa9059cbb000000000000000000000000000000000000000000000000000000008484611648565b610ce8576040517ffb7f507900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815160609060a083901c9081111561142f576040517ff9a99b2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156114cb5782846000815181106114495761144961183d565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260015b818110156114c957600081815260208790526040902054855186908390811061149c5761149c61183d565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101611471565b505b50919392505050565b60008080526020849052604090205460a01c80831061151f576040517f4e23d03500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260000361155957600080805260208590526040902060a082901b73ffffffffffffffffffffffffffffffffffffffff8416179055610cc1565b600083815260208590526040902073ffffffffffffffffffffffffffffffffffffffff8316905550505050565b6000808052602082905260408120549060a082901c908190036115d5576040517f06a2af9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81016000908152602084905260408120556001811115610ce85760008080526020849052604090207fffffffffffffffffffffffff000000000000000000000000000000000000000083019055505050565b60006040518481528360048201528260248201526020600060448360008a5af19150508015611694573d801561168a57600160005114601f3d11169150611692565b6000863b1191505b505b949350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461063957600080fd5b600080604083850312156116d157600080fd5b82356116dc8161169c565b946020939093013593505050565b6000602082840312156116fc57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561175157835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161171f565b50909695505050505050565b6000806040838503121561177057600080fd5b8235915060208301356117828161169c565b809150509250929050565b60006020828403121561179f57600080fd5b8135610a168161169c565b6000602082840312156117bc57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611823576118236117c3565b5060010190565b81810381811115610a0057610a006117c3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220a88fb4080cc4bdf9406bb4f95af733ca8828bc85af8b7a806add1f220bd2622164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063b55e8ca911610097578063f204bdb911610066578063f204bdb914610216578063f2fde38b14610229578063fc0c546a1461023c578063fc4333cd1461026357600080fd5b8063b55e8ca9146101c8578063d01f63f5146101db578063d2521ae8146101f0578063e5136e941461020357600080fd5b8063302150e5116100d3578063302150e514610186578063715018a61461018f57806378e3214f146101975780638da5cb5b146101aa57600080fd5b80631aa3a008146100fa5780632af05166146101045780632c01097a1461016f575b600080fd5b61010261026b565b005b6101456101123660046116be565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61017860025481565b604051908152602001610166565b61017860035481565b6101026105e7565b6101026101a53660046116be565b6105fb565b60005473ffffffffffffffffffffffffffffffffffffffff16610145565b6101026101d63660046116ea565b610628565b6101e361063c565b6040516101669190611703565b6101026101fe3660046116ea565b61064d565b6101e36102113660046116ea565b610688565b61010261022436600461175d565b610774565b61010261023736600461178d565b610810565b6101457f000000000000000000000000000000000000000000000000000000000000000081565b6101026108c9565b6002546040517fbcc3f3bd0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063bcc3f3bd90602401602060405180830381865afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c91906117aa565b1015610354576040517f63bd63ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061036060046109ed565b9050600354810361056f576040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201819052906000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041f91906117aa565b905060005b83811015610513576000610439600483610a06565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156104cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef91906117aa565b905083811015610500578194508093505b50508061050c906117f2565b9050610424565b503373ffffffffffffffffffffffffffffffffffffffff831603610563576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61056c82610a1d565b50505b61057a600433610a6f565b6105b0576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040513381527f2d3734a8e47ac8316e500ac231c90a6e1848ca2285f40d07eaa52005e4b3a0e9906020015b60405180910390a150565b6105ef610ae0565b6105f96000610b61565b565b610603610ae0565b61062473ffffffffffffffffffffffffffffffffffffffff83163383610bd6565b5050565b610630610ae0565b61063981610ced565b50565b60606106486004610d22565b905090565b610655610ae0565b600061066160046109ed565b90508082101561067f5761067f600461067a848461182a565b610d88565b6106248261111e565b60606106946004610d22565b805190915060005b8181101561076d57600160008483815181106106ba576106ba61183d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168382815181106107405761074061183d565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260010161069c565b5050919050565b33600081815260016020908152604080832086845282529182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558251938452908301859052908201527fb863cf86b291171e4b0332ea12b59af030f98a2c74a6d51effaf1109ae4c7f1e9060600160405180910390a15050565b610818610ae0565b73ffffffffffffffffffffffffffffffffffffffff81166108c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61063981610b61565b60006108d560046109ed565b905060005b818110156106245760006108ef600483610a06565b6002546040517fbcc3f3bd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015292935090917f0000000000000000000000000000000000000000000000000000000000000000169063bcc3f3bd90602401602060405180830381865afa158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a791906117aa565b10156109e0576109b681610a1d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201916109e7565b6001909101905b506108da565b60008080526020829052604081205460a01c5b92915050565b6000818152602083905260408120545b9392505050565b610a28600482611153565b5060405173ffffffffffffffffffffffffffffffffffffffff821681527f75cd6de711483e11488a1cd9b66172abccb9e5c19572f92015a7880f0c8c0edc906020016105dc565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205415610aa457506000610a00565b610aae838361126e565b73ffffffffffffffffffffffffffffffffffffffff929092166000908152600193840160205260409020919091555090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108b7565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8015610ce857610be583611336565b15610cc75780471015610c24576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405160009073ffffffffffffffffffffffffffffffffffffffff84169061138890849084818181858888f193505050503d8060008114610c81576040519150601f19603f3d011682016040523d82523d6000602084013e610c86565b606091505b5050905080610cc1576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b610ce873ffffffffffffffffffffffffffffffffffffffff84168383611389565b505050565b60028190556040518181527fb51788a67c010f6b744a03da1a32541fab962da32125c5019bb804e24fc61a14906020016105dc565b60008080526020829052604090205460609060a081901c67ffffffffffffffff811115610d5157610d5161186c565b604051908082528060200260200182016040528015610d7a578160200160208202803683370190505b50915061076d8383836113eb565b600080610d9484610d22565b805190915060008167ffffffffffffffff811115610db457610db461186c565b604051908082528060200260200182016040528015610ddd578160200160208202803683370190505b50905060005b82811015610f28577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231858381518110610e3957610e3961183d565b60200260200101516040518263ffffffff1660e01b8152600401610e79919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b602060405180830381865afa158015610e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eba91906117aa565b828281518110610ecc57610ecc61183d565b602002602001018181525050818581518110610eea57610eea61183d565b6020026020010151828281518110610f0457610f0461183d565b60200260200101511115610f16578094505b80610f20816117f2565b915050610de3565b50845b828110156110d557818581518110610f4557610f4561183d565b6020026020010151828281518110610f5f57610f5f61183d565b6020026020010151116110c357838581518110610f7e57610f7e61183d565b6020026020010151848281518110610f9857610f9861183d565b6020026020010151858381518110610fb257610fb261183d565b60200260200101868881518110610fcb57610fcb61183d565b73ffffffffffffffffffffffffffffffffffffffff93841660209182029290920101529116905281518290869081106110065761100661183d565b60200260200101518282815181106110205761102061183d565b602002602001015183838151811061103a5761103a61183d565b602002602001018488815181106110535761105361183d565b6020908102919091010191909152526000945060015b868110156110c1578286815181106110835761108361183d565b602002602001015183828151811061109d5761109d61183d565b602002602001015111156110af578095505b806110b9816117f2565b915050611069565b505b806110cd816117f2565b915050610f2b565b5060005b85811015611115576111038482815181106110f6576110f661183d565b6020026020010151610a1d565b8061110d816117f2565b9150506110d9565b50505050505050565b60038190556040518181527fafde81f0daa09442c2fecab15f71e1abbb253d0cd187744a78d180f0e675493c906020016105dc565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205480820361118c576000915050610a00565b60008080526020859052604090205460a01c811015611238576000808052602085905260408082205460a01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018252812054905061120e857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8401836114d4565b73ffffffffffffffffffffffffffffffffffffffff16600090815260018501602052604090208190555b61124184611586565b505073ffffffffffffffffffffffffffffffffffffffff1660009081526001918201602052604081205590565b60008080526020839052604081205460a081901c8083036112e357600080805260208690526040902074ffffffffffffffffffffffffffffffffffffffffff7401000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff87160116905561132b565b6000808052602086905260408082207401000000000000000000000000000000000000000085019055828252902073ffffffffffffffffffffffffffffffffffffffff851690555b600101949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82161580610a00575073ffffffffffffffffffffffffffffffffffffffff821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1492915050565b6113b5837fa9059cbb000000000000000000000000000000000000000000000000000000008484611648565b610ce8576040517ffb7f507900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815160609060a083901c9081111561142f576040517ff9a99b2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156114cb5782846000815181106114495761144961183d565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260015b818110156114c957600081815260208790526040902054855186908390811061149c5761149c61183d565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101611471565b505b50919392505050565b60008080526020849052604090205460a01c80831061151f576040517f4e23d03500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260000361155957600080805260208590526040902060a082901b73ffffffffffffffffffffffffffffffffffffffff8416179055610cc1565b600083815260208590526040902073ffffffffffffffffffffffffffffffffffffffff8316905550505050565b6000808052602082905260408120549060a082901c908190036115d5576040517f06a2af9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81016000908152602084905260408120556001811115610ce85760008080526020849052604090207fffffffffffffffffffffffff000000000000000000000000000000000000000083019055505050565b60006040518481528360048201528260248201526020600060448360008a5af19150508015611694573d801561168a57600160005114601f3d11169150611692565b6000863b1191505b505b949350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461063957600080fd5b600080604083850312156116d157600080fd5b82356116dc8161169c565b946020939093013593505050565b6000602082840312156116fc57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561175157835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161171f565b50909695505050505050565b6000806040838503121561177057600080fd5b8235915060208301356117828161169c565b809150509250929050565b60006020828403121561179f57600080fd5b8135610a168161169c565b6000602082840312156117bc57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611823576118236117c3565b5060010190565b81810381811115610a0057610a006117c3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220a88fb4080cc4bdf9406bb4f95af733ca8828bc85af8b7a806add1f220bd2622164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Contract with trades resolvers whitelist",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8309,
        "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13642,
        "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
        "label": "promotions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 13644,
        "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
        "label": "resolverThreshold",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 13646,
        "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
        "label": "whitelistLimit",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13649,
        "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
        "label": "_whitelist",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Data)6905_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Data)6523_storage": {
        "encoding": "inplace",
        "label": "struct AddressArray.Data",
        "members": [
          {
            "astId": 6522,
            "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
            "label": "_raw",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)6905_storage": {
        "encoding": "inplace",
        "label": "struct AddressSet.Data",
        "members": [
          {
            "astId": 6900,
            "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
            "label": "items",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Data)6523_storage"
          },
          {
            "astId": 6904,
            "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
            "label": "lookup",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}