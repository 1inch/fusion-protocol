{
  "address": "0xa515E173279DFeEa375c5e24e2Da0521b2f4Cc0F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWhitelistRegistry",
          "name": "whitelist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "limitOrderProtocol",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedExternalCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectCalldataParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughCredit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyFeeBankAccess",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creditAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseCreditAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takingAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "interactiveData",
          "type": "bytes"
        }
      ],
      "name": "fillOrderInteraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseCreditAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOrderMixin",
          "name": "orderMixin",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "offsets",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "interactions",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderLib.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "interaction",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "makingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "matchOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOrderMixin",
          "name": "orderMixin",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "offsets",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "interactions",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderLib.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "interaction",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "makingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "matchOrdersEOA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeBank",
          "type": "address"
        }
      ],
      "name": "setFeeBank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a1124be669805f586de583c274ce18588dd7e17e51457a67f888ef19e4a274c",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xa515E173279DFeEa375c5e24e2Da0521b2f4Cc0F",
    "transactionIndex": 58,
    "gasUsed": "1292333",
    "logsBloom": "0x00000100000000000000000000080000000000000000000000800000000000000000000000020000000000000040000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000001000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7948a814350b69c51d287468ca5e0d187d1c43473c63a59a49132842510b191f",
    "transactionHash": "0x9a1124be669805f586de583c274ce18588dd7e17e51457a67f888ef19e4a274c",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 15716826,
        "transactionHash": "0x9a1124be669805f586de583c274ce18588dd7e17e51457a67f888ef19e4a274c",
        "address": "0xa515E173279DFeEa375c5e24e2Da0521b2f4Cc0F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 109,
        "blockHash": "0x7948a814350b69c51d287468ca5e0d187d1c43473c63a59a49132842510b191f"
      }
    ],
    "blockNumber": 15716826,
    "cumulativeGasUsed": "6443270",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x52096d540719a8577FE634624F50BADeA050eebD",
    "0x9b934b33fef7a899f502bc191e820ae655797ed3"
  ],
  "numDeployments": 4,
  "solcInputHash": "e8593314242509f4948f5b5f0ab6ea7d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWhitelistRegistry\",\"name\":\"whitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitOrderProtocol\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedExternalCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectCalldataParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughCredit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyFeeBankAccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseCreditAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactiveData\",\"type\":\"bytes\"}],\"name\":\"fillOrderInteraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseCreditAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOrderMixin\",\"name\":\"orderMixin\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactions\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"matchOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOrderMixin\",\"name\":\"orderMixin\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactions\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"matchOrdersEOA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeBank\",\"type\":\"address\"}],\"name\":\"setFeeBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Settlement.sol\":\"Settlement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@1inch/limit-order-protocol/contracts/OrderLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@1inch/solidity-utils/contracts/libraries/ECDSA.sol\\\";\\n\\nlibrary OrderLib {\\n    struct Order {\\n        uint256 salt;\\n        address makerAsset;\\n        address takerAsset;\\n        address maker;\\n        address receiver;\\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n        uint256 offsets;\\n        // bytes makerAssetData;\\n        // bytes takerAssetData;\\n        // bytes getMakingAmount; // this.staticcall(abi.encodePacked(bytes, swapTakerAmount)) => (swapMakerAmount)\\n        // bytes getTakingAmount; // this.staticcall(abi.encodePacked(bytes, swapMakerAmount)) => (swapTakerAmount)\\n        // bytes predicate;       // this.staticcall(bytes) => (bool)\\n        // bytes permit;          // On first fill: permit.1.call(abi.encodePacked(permit.selector, permit.2))\\n        // bytes preInteraction;\\n        // bytes postInteraction;\\n        bytes interactions; // concat(makerAssetData, takerAssetData, getMakingAmount, getTakingAmount, predicate, permit, preIntercation, postInteraction)\\n    }\\n\\n    bytes32 constant internal _LIMIT_ORDER_TYPEHASH = keccak256(\\n        \\\"Order(\\\"\\n            \\\"uint256 salt,\\\"\\n            \\\"address makerAsset,\\\"\\n            \\\"address takerAsset,\\\"\\n            \\\"address maker,\\\"\\n            \\\"address receiver,\\\"\\n            \\\"address allowedSender,\\\"\\n            \\\"uint256 makingAmount,\\\"\\n            \\\"uint256 takingAmount,\\\"\\n            \\\"uint256 offsets,\\\"\\n            \\\"bytes interactions\\\"\\n        \\\")\\\"\\n    );\\n\\n    enum DynamicField {\\n        MakerAssetData,\\n        TakerAssetData,\\n        GetMakingAmount,\\n        GetTakingAmount,\\n        Predicate,\\n        Permit,\\n        PreInteraction,\\n        PostInteraction\\n    }\\n\\n    function getterIsFrozen(bytes calldata getter) internal pure returns(bool) {\\n        return getter.length == 1 && getter[0] == \\\"x\\\";\\n    }\\n\\n    function _get(Order calldata order, DynamicField field) private pure returns(bytes calldata) {\\n        uint256 bitShift = uint256(field) << 5; // field * 32\\n        return order.interactions[\\n            uint32((order.offsets << 32) >> bitShift):\\n            uint32(order.offsets >> bitShift)\\n        ];\\n    }\\n\\n    function makerAssetData(Order calldata order) internal pure returns(bytes calldata) {\\n        return _get(order, DynamicField.MakerAssetData);\\n    }\\n\\n    function takerAssetData(Order calldata order) internal pure returns(bytes calldata) {\\n        return _get(order, DynamicField.TakerAssetData);\\n    }\\n\\n    function getMakingAmount(Order calldata order) internal pure returns(bytes calldata) {\\n        return _get(order, DynamicField.GetMakingAmount);\\n    }\\n\\n    function getTakingAmount(Order calldata order) internal pure returns(bytes calldata) {\\n        return _get(order, DynamicField.GetTakingAmount);\\n    }\\n\\n    function predicate(Order calldata order) internal pure returns(bytes calldata) {\\n        return _get(order, DynamicField.Predicate);\\n    }\\n\\n    function permit(Order calldata order) internal pure returns(bytes calldata) {\\n        return _get(order, DynamicField.Permit);\\n    }\\n\\n    function preInteraction(Order calldata order) internal pure returns(bytes calldata) {\\n        return _get(order, DynamicField.PreInteraction);\\n    }\\n\\n    function postInteraction(Order calldata order) internal pure returns(bytes calldata) {\\n        return _get(order, DynamicField.PostInteraction);\\n    }\\n\\n    function hash(Order calldata order, bytes32 domainSeparator) internal pure returns(bytes32 result) {\\n        bytes calldata interactions = order.interactions;\\n        bytes32 typehash = _LIMIT_ORDER_TYPEHASH;\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // keccak256(abi.encode(_LIMIT_ORDER_TYPEHASH, orderWithoutInteractions, keccak256(order.interactions)));\\n            calldatacopy(ptr, interactions.offset, interactions.length)\\n            mstore(add(ptr, 0x140), keccak256(ptr, interactions.length))\\n            calldatacopy(add(ptr, 0x20), order, 0x120)\\n            mstore(ptr, typehash)\\n            result := keccak256(ptr, 0x160)\\n        }\\n        result = ECDSA.toTypedDataHash(domainSeparator, result);\\n    }\\n}\\n\",\"keccak256\":\"0x7e44db5eed20f3314d588f75e0d9b582d50c0f2ed7cdfe7124b24b37b8567f1f\",\"license\":\"MIT\"},\"@1inch/limit-order-protocol/contracts/interfaces/IOrderMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../OrderLib.sol\\\";\\n\\ninterface IOrderMixin {\\n    /**\\n     * @notice Returns unfilled amount for order. Throws if order does not exist\\n     * @param orderHash Order's hash. Can be obtained by the `hashOrder` function\\n     * @return amount Unfilled amount\\n     */\\n    function remaining(bytes32 orderHash) external view returns(uint256 amount);\\n\\n    /**\\n     * @notice Returns unfilled amount for order\\n     * @param orderHash Order's hash. Can be obtained by the `hashOrder` function\\n     * @return rawAmount Unfilled amount of order plus one if order exists. Otherwise 0\\n     */\\n    function remainingRaw(bytes32 orderHash) external view returns(uint256 rawAmount);\\n\\n    /**\\n     * @notice Same as `remainingRaw` but for multiple orders\\n     * @param orderHashes Array of hashes\\n     * @return rawAmounts Array of amounts for each order plus one if order exists or 0 otherwise\\n     */\\n    function remainingsRaw(bytes32[] memory orderHashes) external view returns(uint256[] memory rawAmounts);\\n\\n    /**\\n     * @notice Checks order predicate\\n     * @param order Order to check predicate for\\n     * @return result Predicate evaluation result. True if predicate allows to fill the order, false otherwise\\n     */\\n    function checkPredicate(OrderLib.Order calldata order) external view returns(bool result);\\n\\n    /**\\n     * @notice Returns order hash according to EIP712 standard\\n     * @param order Order to get hash for\\n     * @return orderHash Hash of the order\\n     */\\n    function hashOrder(OrderLib.Order calldata order) external view returns(bytes32);\\n\\n    /**\\n     * @notice Delegates execution to custom implementation. Could be used to validate if `transferFrom` works properly\\n     * @dev The function always reverts and returns the simulation results in revert data.\\n     * @param target Addresses that will be delegated\\n     * @param data Data that will be passed to delegatee\\n     */\\n    function simulate(address target, bytes calldata data) external;\\n\\n    /**\\n     * @notice Cancels order.\\n     * @dev Order is cancelled by setting remaining amount to _ORDER_FILLED value\\n     * @param order Order quote to cancel\\n     * @return orderRemaining Unfilled amount of order before cancellation\\n     * @return orderHash Hash of the filled order\\n     */\\n    function cancelOrder(OrderLib.Order calldata order) external returns(uint256 orderRemaining, bytes32 orderHash);\\n\\n    /**\\n     * @notice Fills an order. If one doesn't exist (first fill) it will be created using order.makerAssetData\\n     * @param order Order quote to fill\\n     * @param signature Signature to confirm quote ownership\\n     * @param interaction A call data for InteractiveNotificationReceiver. Taker may execute interaction after getting maker assets and before sending taker assets.\\n     * @param makingAmount Making amount\\n     * @param takingAmount Taking amount\\n     * @param skipPermitAndThresholdAmount Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. Top-most bit specifies whether taker wants to skip maker's permit.\\n     * @return actualMakingAmount Actual amount transferred from maker to taker\\n     * @return actualTakingAmount Actual amount transferred from taker to maker\\n     * @return orderHash Hash of the filled order\\n     */\\n    function fillOrder(\\n        OrderLib.Order calldata order,\\n        bytes calldata signature,\\n        bytes calldata interaction,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 skipPermitAndThresholdAmount\\n    ) external payable returns(uint256 actualMakingAmount, uint256 actualTakingAmount, bytes32 orderHash);\\n\\n    /**\\n     * @notice Same as `fillOrderTo` but calls permit first,\\n     * allowing to approve token spending and make a swap in one transaction.\\n     * Also allows to specify funds destination instead of `msg.sender`\\n     * @dev See tests for examples\\n     * @param order Order quote to fill\\n     * @param signature Signature to confirm quote ownership\\n     * @param interaction A call data for InteractiveNotificationReceiver. Taker may execute interaction after getting maker assets and before sending taker assets.\\n     * @param makingAmount Making amount\\n     * @param takingAmount Taking amount\\n     * @param skipPermitAndThresholdAmount Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. Top-most bit specifies whether taker wants to skip maker's permit.\\n     * @param target Address that will receive swap funds\\n     * @param permit Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.\\n     * @return actualMakingAmount Actual amount transferred from maker to taker\\n     * @return actualTakingAmount Actual amount transferred from taker to maker\\n     * @return orderHash Hash of the filled order\\n     */\\n    function fillOrderToWithPermit(\\n        OrderLib.Order calldata order,\\n        bytes calldata signature,\\n        bytes calldata interaction,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 skipPermitAndThresholdAmount,\\n        address target,\\n        bytes calldata permit\\n    ) external returns(uint256 actualMakingAmount, uint256 actualTakingAmount, bytes32 orderHash);\\n\\n    /**\\n     * @notice Same as `fillOrder` but allows to specify funds destination instead of `msg.sender`\\n     * @param order_ Order quote to fill\\n     * @param signature Signature to confirm quote ownership\\n     * @param interaction A call data for InteractiveNotificationReceiver. Taker may execute interaction after getting maker assets and before sending taker assets.\\n     * @param makingAmount Making amount\\n     * @param takingAmount Taking amount\\n     * @param skipPermitAndThresholdAmount Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. Top-most bit specifies whether taker wants to skip maker's permit.\\n     * @param target Address that will receive swap funds\\n     * @return actualMakingAmount Actual amount transferred from maker to taker\\n     * @return actualTakingAmount Actual amount transferred from taker to maker\\n     * @return orderHash Hash of the filled order\\n     */\\n    function fillOrderTo(\\n        OrderLib.Order calldata order_,\\n        bytes calldata signature,\\n        bytes calldata interaction,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 skipPermitAndThresholdAmount,\\n        address target\\n    ) external payable returns(uint256 actualMakingAmount, uint256 actualTakingAmount, bytes32 orderHash);\\n}\\n\",\"keccak256\":\"0x09dc7945547189b7318319bae836cd0e4b132cc6f3c19e3ee2acfebaddc0243b\",\"license\":\"MIT\"},\"@1inch/limit-order-protocol/contracts/interfaces/NotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\npragma abicoder v1;\\n\\n/// @title Interface for interactor which acts between `maker => taker` and `taker => maker` transfers.\\ninterface PreInteractionNotificationReceiver {\\n    function fillOrderPreInteraction(\\n        bytes32 orderHash,\\n        address maker,\\n        address taker,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 remainingAmount,\\n        bytes memory interactiveData\\n    ) external;\\n}\\n\\ninterface PostInteractionNotificationReceiver {\\n    /// @notice Callback method that gets called after taker transferred funds to maker but before\\n    /// the opposite transfer happened\\n    function fillOrderPostInteraction(\\n        bytes32 orderHash,\\n        address maker,\\n        address taker,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 remainingAmount,\\n        bytes memory interactiveData\\n    ) external;\\n}\\n\\ninterface InteractionNotificationReceiver {\\n    function fillOrderInteraction(\\n        address taker,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        bytes memory interactiveData\\n    ) external returns(uint256 offeredTakingAmount);\\n}\\n\",\"keccak256\":\"0xd8b903ceaafef62b31ffc5c41ec099c8a0302ad74d5d58cf81c4dcb6c959786a\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\nlibrary ECDSA {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    uint256 private constant _S_BOUNDARY = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 + 1;\\n\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal view returns(address signer) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            if lt(s, _S_BOUNDARY) {\\n                let ptr := mload(0x40)\\n\\n                mstore(ptr, hash)\\n                mstore(add(ptr, 0x20), v)\\n                mstore(add(ptr, 0x40), r)\\n                mstore(add(ptr, 0x60), s)\\n                mstore(0, 0)\\n                pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                signer := mload(0)\\n            }\\n        }\\n    }\\n\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal view returns(address signer) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let s := shr(1, shl(1, vs))\\n            if lt(s, _S_BOUNDARY) {\\n                let ptr := mload(0x40)\\n\\n                mstore(ptr, hash)\\n                mstore(add(ptr, 0x20), add(27, shr(255, vs)))\\n                mstore(add(ptr, 0x40), r)\\n                mstore(add(ptr, 0x60), s)\\n                mstore(0, 0)\\n                pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                signer := mload(0)\\n            }\\n        }\\n    }\\n\\n    function recover(bytes32 hash, bytes calldata signature) internal view returns(address signer) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // memory[ptr:ptr+0x80] = (hash, v, r, s)\\n            switch signature.length\\n            case 65 {\\n                // memory[ptr+0x20:ptr+0x80] = (v, r, s)\\n                mstore(add(ptr, 0x20), byte(0, calldataload(add(signature.offset, 0x40))))\\n                calldatacopy(add(ptr, 0x40), signature.offset, 0x40)\\n            }\\n            case 64 {\\n                // memory[ptr+0x20:ptr+0x80] = (v, r, s)\\n                let vs := calldataload(add(signature.offset, 0x20))\\n                mstore(add(ptr, 0x20), add(27, shr(255, vs)))\\n                calldatacopy(add(ptr, 0x40), signature.offset, 0x20)\\n                mstore(add(ptr, 0x60), shr(1, shl(1, vs)))\\n            }\\n            default {\\n                ptr := 0\\n            }\\n\\n            if ptr {\\n                if lt(mload(add(ptr, 0x60)), _S_BOUNDARY) {\\n                    // memory[ptr:ptr+0x20] = (hash)\\n                    mstore(ptr, hash)\\n\\n                    mstore(0, 0)\\n                    pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                    signer := mload(0)\\n                }\\n            }\\n        }\\n    }\\n\\n    function recoverOrIsValidSignature(address signer, bytes32 hash, bytes calldata signature) internal view returns(bool success) {\\n        if (signer == address(0)) return false;\\n        if ((signature.length == 64 || signature.length == 65) && recover(hash, signature) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, signature);\\n    }\\n\\n    function recoverOrIsValidSignature(address signer, bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal view returns(bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, v, r, s) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, v, r, s);\\n    }\\n\\n    function recoverOrIsValidSignature(address signer, bytes32 hash, bytes32 r, bytes32 vs) internal view returns(bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, r, vs) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, r, vs);\\n    }\\n\\n    function recoverOrIsValidSignature65(address signer, bytes32 hash, bytes32 r, bytes32 vs) internal view returns(bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, r, vs) == signer) {\\n            return true;\\n        }\\n        return isValidSignature65(signer, hash, r, vs);\\n    }\\n\\n    function isValidSignature(address signer, bytes32 hash, bytes calldata signature) internal view returns(bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature));\\n        // return success && data.length >= 4 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), signature.length)\\n            calldatacopy(add(ptr, 0x64), signature.offset, signature.length)\\n            if staticcall(gas(), signer, ptr, add(0x64, signature.length), 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    function isValidSignature(address signer, bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal view returns(bool success) {\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 65)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), s)\\n            mstore8(add(ptr, 0xa4), v)\\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    function isValidSignature(address signer, bytes32 hash, bytes32 r, bytes32 vs) internal view returns(bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, abi.encodePacked(r, vs)));\\n        // return success && data.length >= 4 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 64)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), vs)\\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    function isValidSignature65(address signer, bytes32 hash, bytes32 r, bytes32 vs) internal view returns(bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, abi.encodePacked(r, vs & ~uint256(1 << 255), uint8(vs >> 255))));\\n        // return success && data.length >= 4 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 65)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), shr(1, shl(1, vs)))\\n            mstore8(add(ptr, 0xa4), add(27, shr(255, vs)))\\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 res) {\\n        // 32 is the length in bytes of hash, enforced by the type signature above\\n        // return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            mstore(0, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000) // \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n            mstore(28, hash)\\n            res := keccak256(0, 60)\\n        }\\n    }\\n\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 res) {\\n        // return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x1901000000000000000000000000000000000000000000000000000000000000) // \\\"\\\\x19\\\\x01\\\"\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            res := keccak256(ptr, 66)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd7628ce795777c9990ccab633c96e87b212840983e5f871de1b5af2e25036c01\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Settlement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@1inch/limit-order-protocol/contracts/interfaces/NotificationReceiver.sol\\\";\\nimport \\\"@1inch/limit-order-protocol/contracts/interfaces/IOrderMixin.sol\\\";\\nimport \\\"./helpers/WhitelistChecker.sol\\\";\\nimport \\\"./interfaces/IWhitelistRegistry.sol\\\";\\nimport \\\"./interfaces/ISettlement.sol\\\";\\n\\ncontract Settlement is ISettlement, Ownable, WhitelistChecker {\\n    bytes1 private constant _FINALIZE_INTERACTION = 0x01;\\n    uint256 private constant _ORDER_TIME_START_MASK     = 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000; // prettier-ignore\\n    uint256 private constant _ORDER_DURATION_MASK       = 0x00000000FFFFFFFF000000000000000000000000000000000000000000000000; // prettier-ignore\\n    uint256 private constant _ORDER_INITIAL_RATE_MASK   = 0x0000000000000000FFFF00000000000000000000000000000000000000000000; // prettier-ignore\\n    uint256 private constant _ORDER_FEE_MASK            = 0x00000000000000000000FFFFFFFF000000000000000000000000000000000000; // prettier-ignore\\n    uint256 private constant _ORDER_TIME_START_SHIFT = 224; // orderTimeMask 224-255\\n    uint256 private constant _ORDER_DURATION_SHIFT = 192; // durationMask 192-223\\n    uint256 private constant _ORDER_INITIAL_RATE_SHIFT = 176; // initialRateMask 176-191\\n    uint256 private constant _ORDER_FEE_SHIFT = 144; // orderFee 144-175\\n\\n    uint256 private constant _ORDER_FEE_BASE_POINTS = 1e15;\\n    uint16 private constant _BASE_POINTS = 10000; // 100%\\n    uint16 private constant _DEFAULT_INITIAL_RATE_BUMP = 1000; // 10%\\n    uint32 private constant _DEFAULT_DURATION = 30 minutes;\\n\\n    error IncorrectCalldataParams();\\n    error FailedExternalCall();\\n    error OnlyFeeBankAccess();\\n    error NotEnoughCredit();\\n\\n    address public feeBank;\\n    mapping(address => uint256) public creditAllowance;\\n\\n    modifier onlyFeeBank() {\\n        if (msg.sender != feeBank) revert OnlyFeeBankAccess();\\n        _;\\n    }\\n\\n    constructor(IWhitelistRegistry whitelist, address limitOrderProtocol)\\n        WhitelistChecker(whitelist, limitOrderProtocol)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    function matchOrders(\\n        IOrderMixin orderMixin,\\n        OrderLib.Order calldata order,\\n        bytes calldata signature,\\n        bytes calldata interaction,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 thresholdAmount,\\n        address target\\n    ) external onlyWhitelisted(msg.sender) {\\n        _matchOrder(orderMixin, order, msg.sender, signature, interaction, makingAmount, takingAmount, thresholdAmount, target);\\n    }\\n\\n    function matchOrdersEOA(\\n        IOrderMixin orderMixin,\\n        OrderLib.Order calldata order,\\n        bytes calldata signature,\\n        bytes calldata interaction,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 thresholdAmount,\\n        address target\\n    ) external onlyWhitelistedEOA {\\n        _matchOrder(\\n            orderMixin,\\n            order,\\n            tx.origin, // solhint-disable-line avoid-tx-origin\\n            signature,\\n            interaction,\\n            makingAmount,\\n            takingAmount,\\n            thresholdAmount,\\n            target\\n        );\\n    }\\n\\n    function fillOrderInteraction(\\n        address, /* taker */\\n        uint256, /* makingAmount */\\n        uint256 takingAmount,\\n        bytes calldata interactiveData\\n    ) external returns (uint256) {\\n        address interactor = _onlyLimitOrderProtocol();\\n        if (interactiveData[0] == _FINALIZE_INTERACTION) {\\n            (address[] calldata targets, bytes[] calldata calldatas) = _abiDecodeFinal(interactiveData[1:]);\\n\\n            uint256 length = targets.length;\\n            if (length != calldatas.length) revert IncorrectCalldataParams();\\n            for (uint256 i = 0; i < length; i++) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool success, ) = targets[i].call(calldatas[i]);\\n                if (!success) revert FailedExternalCall();\\n            }\\n        } else {\\n            (\\n                OrderLib.Order calldata order,\\n                bytes calldata signature,\\n                bytes calldata interaction,\\n                uint256 makingOrderAmount,\\n                uint256 takingOrderAmount,\\n                uint256 thresholdAmount,\\n                address target\\n            ) = _abiDecodeIteration(interactiveData[1:]);\\n\\n            _matchOrder(\\n                IOrderMixin(msg.sender),\\n                order,\\n                interactor,\\n                signature,\\n                interaction,\\n                makingOrderAmount,\\n                takingOrderAmount,\\n                thresholdAmount,\\n                target\\n            );\\n        }\\n        uint256 salt = uint256(bytes32(interactiveData[interactiveData.length - 32:]));\\n        return (takingAmount * _getFeeRate(salt)) / _BASE_POINTS;\\n    }\\n\\n    function _getFeeRate(uint256 salt) internal view returns (uint256) {\\n        uint256 orderStartTime = (salt & _ORDER_TIME_START_MASK) >> _ORDER_TIME_START_SHIFT;\\n        uint256 duration = (salt & _ORDER_DURATION_MASK) >> _ORDER_DURATION_SHIFT;\\n        uint256 initialRateBump = (salt & _ORDER_INITIAL_RATE_MASK) >> _ORDER_INITIAL_RATE_SHIFT;\\n        if (duration == 0) {\\n            duration = _DEFAULT_DURATION;\\n        }\\n        if (initialRateBump == 0) {\\n            initialRateBump = _DEFAULT_INITIAL_RATE_BUMP;\\n        }\\n\\n        unchecked {\\n            if (block.timestamp > orderStartTime) {  // solhint-disable-line not-rely-on-time\\n                uint256 timePassed = block.timestamp - orderStartTime;  // solhint-disable-line not-rely-on-time\\n                return timePassed < duration\\n                    ? _BASE_POINTS + initialRateBump * (duration - timePassed) / duration\\n                    : _BASE_POINTS;\\n            } else {\\n                return _BASE_POINTS + initialRateBump;\\n            }\\n        }\\n    }\\n\\n    function _matchOrder(\\n        IOrderMixin orderMixin,\\n        OrderLib.Order calldata order,\\n        address interactor,\\n        bytes calldata signature,\\n        bytes calldata interaction,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 thresholdAmount,\\n        address target\\n    ) private {\\n        uint256 orderFee = ((order.salt & _ORDER_FEE_MASK) >> _ORDER_FEE_SHIFT) * _ORDER_FEE_BASE_POINTS;\\n        uint256 currentAllowance = creditAllowance[interactor];\\n        if (currentAllowance < orderFee) revert NotEnoughCredit();\\n        unchecked {\\n            creditAllowance[interactor] = currentAllowance - orderFee;\\n        }\\n        bytes memory patchedInteraction = abi.encodePacked(interaction, order.salt);\\n        orderMixin.fillOrderTo(\\n            order,\\n            signature,\\n            patchedInteraction,\\n            makingAmount,\\n            takingAmount,\\n            thresholdAmount,\\n            target\\n        );\\n    }\\n\\n    function increaseCreditAllowance(address account, uint256 amount) external onlyFeeBank returns (uint256 allowance) {\\n        allowance = creditAllowance[account];\\n        allowance += amount;\\n        creditAllowance[account] = allowance;\\n    }\\n\\n    function decreaseCreditAllowance(address account, uint256 amount) external onlyFeeBank returns (uint256 allowance) {\\n        allowance = creditAllowance[account];\\n        allowance -= amount;\\n        creditAllowance[account] = allowance;\\n    }\\n\\n    function setFeeBank(address newFeeBank) external onlyOwner {\\n        feeBank = newFeeBank;\\n    }\\n\\n    function _abiDecodeFinal(bytes calldata cd)\\n        private\\n        pure\\n        returns (address[] calldata targets, bytes[] calldata calldatas)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := add(cd.offset, calldataload(cd.offset))\\n            targets.offset := add(ptr, 0x20)\\n            targets.length := calldataload(ptr)\\n\\n            ptr := add(cd.offset, calldataload(add(cd.offset, 0x20)))\\n            calldatas.offset := add(ptr, 0x20)\\n            calldatas.length := calldataload(ptr)\\n        }\\n    }\\n\\n    function _abiDecodeIteration(bytes calldata cd)\\n        private\\n        pure\\n        returns (\\n            OrderLib.Order calldata order,\\n            bytes calldata signature,\\n            bytes calldata interaction,\\n            uint256 makingOrderAmount,\\n            uint256 takingOrderAmount,\\n            uint256 thresholdAmount,\\n            address target\\n        )\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            order := add(cd.offset, calldataload(cd.offset))\\n\\n            let ptr := add(cd.offset, calldataload(add(cd.offset, 0x20)))\\n            signature.offset := add(ptr, 0x20)\\n            signature.length := calldataload(ptr)\\n\\n            ptr := add(cd.offset, calldataload(add(cd.offset, 0x40)))\\n            interaction.offset := add(ptr, 0x20)\\n            interaction.length := calldataload(ptr)\\n\\n            makingOrderAmount := calldataload(add(cd.offset, 0x60))\\n            takingOrderAmount := calldataload(add(cd.offset, 0x80))\\n            thresholdAmount := calldataload(add(cd.offset, 0xa0))\\n            target := calldataload(add(cd.offset, 0xc0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8f883ccf458557ff8ce60ea078012a2887ca10f336d0b83e44952a494d2504b6\",\"license\":\"MIT\"},\"contracts/helpers/WhitelistChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IWhitelistRegistry.sol\\\";\\n\\n/// @title Contract with modifier for check does address in whitelist\\ncontract WhitelistChecker {\\n    error AccessDenied();\\n\\n    address private constant _NOT_CHECKED = address(1);\\n\\n    IWhitelistRegistry private immutable _whitelist;\\n    address private _limitOrderProtocol;\\n    address private _checked = _NOT_CHECKED;\\n\\n    constructor(IWhitelistRegistry whitelist, address limitOrderProtocol) {\\n        _whitelist = whitelist;\\n        _limitOrderProtocol = limitOrderProtocol;\\n    }\\n\\n    modifier onlyWhitelistedEOA() {\\n        _enforceWhitelist(tx.origin); // solhint-disable-line avoid-tx-origin\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted(address account) {\\n        _enforceWhitelist(account);\\n        if (_checked == _NOT_CHECKED) {\\n            _checked = account;\\n            _;\\n            _checked = _NOT_CHECKED;\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    function _onlyLimitOrderProtocol() internal view returns (address checked) {\\n        if (msg.sender != _limitOrderProtocol) revert AccessDenied();\\n        checked = _checked;\\n        if (checked == _NOT_CHECKED) {\\n            checked = tx.origin; // solhint-disable-line avoid-tx-origin\\n            if (!_whitelist.isWhitelisted(checked)) revert AccessDenied();\\n        }\\n    }\\n\\n    function _enforceWhitelist(address account) private view {\\n        if (!_whitelist.isWhitelisted(account)) revert AccessDenied();\\n    }\\n}\\n\",\"keccak256\":\"0x44e6a97c30829250a1b511d941135df5c63c9851c3f43d22a26c6e9238bc9b4d\",\"license\":\"MIT\"},\"contracts/interfaces/ISettlement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@1inch/limit-order-protocol/contracts/interfaces/NotificationReceiver.sol\\\";\\nimport \\\"@1inch/limit-order-protocol/contracts/interfaces/IOrderMixin.sol\\\";\\n\\ninterface ISettlement is InteractionNotificationReceiver {\\n    function matchOrders(\\n        IOrderMixin orderMixin,\\n        OrderLib.Order calldata order,\\n        bytes calldata signature,\\n        bytes calldata interaction,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 thresholdAmount,\\n        address target\\n    ) external;\\n\\n    function matchOrdersEOA(\\n        IOrderMixin orderMixin,\\n        OrderLib.Order calldata order,\\n        bytes calldata signature,\\n        bytes calldata interaction,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 thresholdAmount,\\n        address target\\n    ) external;\\n\\n    function creditAllowance(address account) external returns (uint256);\\n\\n    function increaseCreditAllowance(address account, uint256 amount) external returns (uint256);\\n\\n    function decreaseCreditAllowance(address account, uint256 amount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6f0a6c03e62f75ca8a0eb682a2d29f35af3a9f4a46e400e450f0ed24b8dd090\",\"license\":\"MIT\"},\"contracts/interfaces/IWhitelistRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\npragma abicoder v1;\\n\\ninterface IWhitelistRegistry {\\n    function isWhitelisted(address addr) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7fb9855c83b2fc2fc3cf2ddcb1290c0b4203d11e4c8b73d63f7551d50c771e30\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600280546001600160a01b03191660011790553480156200002457600080fd5b5060405162001684380380620016848339810160408190526200004791620000e9565b8181620000543362000080565b6001600160a01b03918216608052600180546001600160a01b0319169190921617905550620001289050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000e657600080fd5b50565b60008060408385031215620000fd57600080fd5b82516200010a81620000d0565b60208401519092506200011d81620000d0565b809150509250929050565b6080516115396200014b600039600081816108fd0152610c6901526115396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063af15d78611610081578063ebbd4d5e1161005b578063ebbd4d5e146101b6578063f2fde38b146101c9578063ff656d45146101dc57600080fd5b8063af15d78614610163578063ccee33d714610183578063cedf5ecf1461019657600080fd5b80636bd0d927116100b25780636bd0d92714610109578063715018a61461011c5780638da5cb5b1461012457600080fd5b80630774a852146100ce5780636231357f146100e3575b600080fd5b6100e16100dc366004610dd7565b6101ef565b005b6100f66100f1366004610dfb565b61023e565b6040519081526020015b60405180910390f35b6100e1610117366004610e89565b6102f3565b6100e16103df565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610100565b60035461013e9073ffffffffffffffffffffffffffffffffffffffff1681565b6100f6610191366004610f5b565b6103f3565b6100f66101a4366004610dd7565b60046020526000908152604090205481565b6100f66101c4366004610dfb565b6106ce565b6100e16101d7366004610dd7565b610753565b6100e16101ea366004610e89565b61080f565b6101f7610837565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60035460009073ffffffffffffffffffffffffffffffffffffffff163314610292576040517fa454419900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff82166000908152600460205260409020546102c38282610ff4565b73ffffffffffffffffffffffffffffffffffffffff90931660009081526004602052604090208390555090919050565b336102fd816108b8565b60025473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016103bf57600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905561038f8b8b338c8c8c8c8c8c8c8c61099e565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001660011790556103d2565b6103d28b8b338c8c8c8c8c8c8c8c61099e565b5050505050505050505050565b6103e7610837565b6103f16000610b2d565b565b6000806103fe610ba2565b90507f010000000000000000000000000000000000000000000000000000000000000084846000816104325761043261100d565b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036105ee573660008181610493610478886001818c61103c565b50602081358201818101939035928281013501918201913590565b92965090945092509050828082146104d7576040517f969d981800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156105e35760008686838181106104f6576104f661100d565b905060200201602081019061050b9190610dd7565b73ffffffffffffffffffffffffffffffffffffffff168585848181106105335761053361100d565b90506020028101906105459190611066565b6040516105539291906110cb565b6000604051808303816000865af19150503d8060008114610590576040519150601f19603f3d011682016040523d82523d6000602084013e610595565b606091505b50509050806105d0576040517f1d6d30e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50806105db816110db565b9150506104da565b50505050505061067d565b3636600036600080600080600061064e8d8d60019080926106119392919061103c565b5080358101916020808301358301808201939035926040820135820192830192359160608101359160808201359160a08101359160c09091013590565b985098509850985098509850985098509850610673338a8c8b8b8b8b8b8b8b8b61099e565b5050505050505050505b6000848461068c602082610ff4565b61069792829061103c565b6106a091611113565b90506127106106ae82610d22565b6106b8908861114f565b6106c29190611195565b98975050505050505050565b60035460009073ffffffffffffffffffffffffffffffffffffffff163314610722576040517fa454419900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff82166000908152600460205260409020546102c382826111d0565b61075b610837565b73ffffffffffffffffffffffffffffffffffffffff8116610803576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61080c81610b2d565b50565b610818326108b8565b61082b8a8a328b8b8b8b8b8b8b8b61099e565b50505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107fa565b6040517f3af32abf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f00000000000000000000000000000000000000000000000000000000000000001690633af32abf90602401602060405180830381865afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096891906111e3565b61080c576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109bb66038d7ea4c6800063ffffffff8d3560901c1661114f565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526004602052604090205490915081811015610a1e576040517fa7fd379200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b818103600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600088888e60000135604051602001610a7f93929190611205565b60405160208183030381529060405290508d73ffffffffffffffffffffffffffffffffffffffff1663e5d7bde68e8d8d858c8c8c8c6040518963ffffffff1660e01b8152600401610ad7989796959493929190611328565b6060604051808303816000875af1158015610af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1a91906114d5565b5050505050505050505050505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60015460009073ffffffffffffffffffffffffffffffffffffffff163314610bf6576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060025473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101610d1f57506040517f3af32abf0000000000000000000000000000000000000000000000000000000081523260048201819052907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633af32abf90602401602060405180830381865afa158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce991906111e3565b610d1f576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b90565b600060e082901c60c083901c63ffffffff1661ffff60b085901c16818403610d4a5761070891505b80600003610d5757506103e85b82421115610d995742839003828110610d7257612710610d8f565b82818403830281610d8557610d85611166565b0461271061ffff16015b9695505050505050565b61271001949350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461080c57600080fd5b8035610dd281610da5565b919050565b600060208284031215610de957600080fd5b8135610df481610da5565b9392505050565b60008060408385031215610e0e57600080fd5b8235610e1981610da5565b946020939093013593505050565b60006101408284031215610e3a57600080fd5b50919050565b60008083601f840112610e5257600080fd5b50813567ffffffffffffffff811115610e6a57600080fd5b602083019150836020828501011115610e8257600080fd5b9250929050565b6000806000806000806000806000806101008b8d031215610ea957600080fd5b610eb28b610dc7565b995060208b013567ffffffffffffffff80821115610ecf57600080fd5b610edb8e838f01610e27565b9a5060408d0135915080821115610ef157600080fd5b610efd8e838f01610e40565b909a50985060608d0135915080821115610f1657600080fd5b50610f238d828e01610e40565b90975095505060808b0135935060a08b0135925060c08b01359150610f4a60e08c01610dc7565b90509295989b9194979a5092959850565b600080600080600060808688031215610f7357600080fd5b8535610f7e81610da5565b94506020860135935060408601359250606086013567ffffffffffffffff811115610fa857600080fd5b610fb488828901610e40565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561100757611007610fc5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000808585111561104c57600080fd5b8386111561105957600080fd5b5050820193919092039150565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261109b57600080fd5b83018035915067ffffffffffffffff8211156110b657600080fd5b602001915036819003821315610e8257600080fd5b8183823760009101908152919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361110c5761110c610fc5565b5060010190565b80356020831015611007577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b808202811582820484141761100757611007610fc5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826111cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8082018082111561100757611007610fc5565b6000602082840312156111f557600080fd5b81518015158114610df457600080fd5b82848237909101908152602001919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261124c57600080fd5b830160208101925035905067ffffffffffffffff81111561126c57600080fd5b803603821315610e8257600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6000815180845260005b818110156112ea576020818501810151868301820152016112ce565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60e08152883560e0820152600061134160208b01610dc7565b6101006113658185018373ffffffffffffffffffffffffffffffffffffffff169052565b61137160408d01610dc7565b91506101206113978186018473ffffffffffffffffffffffffffffffffffffffff169052565b6113a360608e01610dc7565b92506101406113c98187018573ffffffffffffffffffffffffffffffffffffffff169052565b6113d560808f01610dc7565b73ffffffffffffffffffffffffffffffffffffffff8116610160880152935061140060a08f01610dc7565b73ffffffffffffffffffffffffffffffffffffffff8116610180880152935060c08e01356101a087015260e08e01356101c0870152828e01356101e087015261144b828f018f611217565b945092508061020087015250506114676102208501838361127b565b915050828103602084015261147d818a8c61127b565b9050828103604084015261149181896112c4565b9150508560608301528460808301528360a08301526114c860c083018473ffffffffffffffffffffffffffffffffffffffff169052565b9998505050505050505050565b6000806000606084860312156114ea57600080fd5b835192506020840151915060408401519050925092509256fea2646970667358221220dc30bbdbe4430254314c4117342a023932c7f39986de57974d741c2d3a5bc56964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c8063af15d78611610081578063ebbd4d5e1161005b578063ebbd4d5e146101b6578063f2fde38b146101c9578063ff656d45146101dc57600080fd5b8063af15d78614610163578063ccee33d714610183578063cedf5ecf1461019657600080fd5b80636bd0d927116100b25780636bd0d92714610109578063715018a61461011c5780638da5cb5b1461012457600080fd5b80630774a852146100ce5780636231357f146100e3575b600080fd5b6100e16100dc366004610dd7565b6101ef565b005b6100f66100f1366004610dfb565b61023e565b6040519081526020015b60405180910390f35b6100e1610117366004610e89565b6102f3565b6100e16103df565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610100565b60035461013e9073ffffffffffffffffffffffffffffffffffffffff1681565b6100f6610191366004610f5b565b6103f3565b6100f66101a4366004610dd7565b60046020526000908152604090205481565b6100f66101c4366004610dfb565b6106ce565b6100e16101d7366004610dd7565b610753565b6100e16101ea366004610e89565b61080f565b6101f7610837565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60035460009073ffffffffffffffffffffffffffffffffffffffff163314610292576040517fa454419900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff82166000908152600460205260409020546102c38282610ff4565b73ffffffffffffffffffffffffffffffffffffffff90931660009081526004602052604090208390555090919050565b336102fd816108b8565b60025473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016103bf57600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905561038f8b8b338c8c8c8c8c8c8c8c61099e565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001660011790556103d2565b6103d28b8b338c8c8c8c8c8c8c8c61099e565b5050505050505050505050565b6103e7610837565b6103f16000610b2d565b565b6000806103fe610ba2565b90507f010000000000000000000000000000000000000000000000000000000000000084846000816104325761043261100d565b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036105ee573660008181610493610478886001818c61103c565b50602081358201818101939035928281013501918201913590565b92965090945092509050828082146104d7576040517f969d981800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156105e35760008686838181106104f6576104f661100d565b905060200201602081019061050b9190610dd7565b73ffffffffffffffffffffffffffffffffffffffff168585848181106105335761053361100d565b90506020028101906105459190611066565b6040516105539291906110cb565b6000604051808303816000865af19150503d8060008114610590576040519150601f19603f3d011682016040523d82523d6000602084013e610595565b606091505b50509050806105d0576040517f1d6d30e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50806105db816110db565b9150506104da565b50505050505061067d565b3636600036600080600080600061064e8d8d60019080926106119392919061103c565b5080358101916020808301358301808201939035926040820135820192830192359160608101359160808201359160a08101359160c09091013590565b985098509850985098509850985098509850610673338a8c8b8b8b8b8b8b8b8b61099e565b5050505050505050505b6000848461068c602082610ff4565b61069792829061103c565b6106a091611113565b90506127106106ae82610d22565b6106b8908861114f565b6106c29190611195565b98975050505050505050565b60035460009073ffffffffffffffffffffffffffffffffffffffff163314610722576040517fa454419900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff82166000908152600460205260409020546102c382826111d0565b61075b610837565b73ffffffffffffffffffffffffffffffffffffffff8116610803576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61080c81610b2d565b50565b610818326108b8565b61082b8a8a328b8b8b8b8b8b8b8b61099e565b50505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107fa565b6040517f3af32abf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f00000000000000000000000000000000000000000000000000000000000000001690633af32abf90602401602060405180830381865afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096891906111e3565b61080c576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109bb66038d7ea4c6800063ffffffff8d3560901c1661114f565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526004602052604090205490915081811015610a1e576040517fa7fd379200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b818103600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600088888e60000135604051602001610a7f93929190611205565b60405160208183030381529060405290508d73ffffffffffffffffffffffffffffffffffffffff1663e5d7bde68e8d8d858c8c8c8c6040518963ffffffff1660e01b8152600401610ad7989796959493929190611328565b6060604051808303816000875af1158015610af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1a91906114d5565b5050505050505050505050505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60015460009073ffffffffffffffffffffffffffffffffffffffff163314610bf6576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060025473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101610d1f57506040517f3af32abf0000000000000000000000000000000000000000000000000000000081523260048201819052907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633af32abf90602401602060405180830381865afa158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce991906111e3565b610d1f576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b90565b600060e082901c60c083901c63ffffffff1661ffff60b085901c16818403610d4a5761070891505b80600003610d5757506103e85b82421115610d995742839003828110610d7257612710610d8f565b82818403830281610d8557610d85611166565b0461271061ffff16015b9695505050505050565b61271001949350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461080c57600080fd5b8035610dd281610da5565b919050565b600060208284031215610de957600080fd5b8135610df481610da5565b9392505050565b60008060408385031215610e0e57600080fd5b8235610e1981610da5565b946020939093013593505050565b60006101408284031215610e3a57600080fd5b50919050565b60008083601f840112610e5257600080fd5b50813567ffffffffffffffff811115610e6a57600080fd5b602083019150836020828501011115610e8257600080fd5b9250929050565b6000806000806000806000806000806101008b8d031215610ea957600080fd5b610eb28b610dc7565b995060208b013567ffffffffffffffff80821115610ecf57600080fd5b610edb8e838f01610e27565b9a5060408d0135915080821115610ef157600080fd5b610efd8e838f01610e40565b909a50985060608d0135915080821115610f1657600080fd5b50610f238d828e01610e40565b90975095505060808b0135935060a08b0135925060c08b01359150610f4a60e08c01610dc7565b90509295989b9194979a5092959850565b600080600080600060808688031215610f7357600080fd5b8535610f7e81610da5565b94506020860135935060408601359250606086013567ffffffffffffffff811115610fa857600080fd5b610fb488828901610e40565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561100757611007610fc5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000808585111561104c57600080fd5b8386111561105957600080fd5b5050820193919092039150565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261109b57600080fd5b83018035915067ffffffffffffffff8211156110b657600080fd5b602001915036819003821315610e8257600080fd5b8183823760009101908152919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361110c5761110c610fc5565b5060010190565b80356020831015611007577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b808202811582820484141761100757611007610fc5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826111cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8082018082111561100757611007610fc5565b6000602082840312156111f557600080fd5b81518015158114610df457600080fd5b82848237909101908152602001919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261124c57600080fd5b830160208101925035905067ffffffffffffffff81111561126c57600080fd5b803603821315610e8257600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6000815180845260005b818110156112ea576020818501810151868301820152016112ce565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60e08152883560e0820152600061134160208b01610dc7565b6101006113658185018373ffffffffffffffffffffffffffffffffffffffff169052565b61137160408d01610dc7565b91506101206113978186018473ffffffffffffffffffffffffffffffffffffffff169052565b6113a360608e01610dc7565b92506101406113c98187018573ffffffffffffffffffffffffffffffffffffffff169052565b6113d560808f01610dc7565b73ffffffffffffffffffffffffffffffffffffffff8116610160880152935061140060a08f01610dc7565b73ffffffffffffffffffffffffffffffffffffffff8116610180880152935060c08e01356101a087015260e08e01356101c0870152828e01356101e087015261144b828f018f611217565b945092508061020087015250506114676102208501838361127b565b915050828103602084015261147d818a8c61127b565b9050828103604084015261149181896112c4565b9150508560608301528460808301528360a08301526114c860c083018473ffffffffffffffffffffffffffffffffffffffff169052565b9998505050505050505050565b6000806000606084860312156114ea57600080fd5b835192506020840151915060408401519050925092509256fea2646970667358221220dc30bbdbe4430254314c4117342a023932c7f39986de57974d741c2d3a5bc56964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7292,
        "contract": "contracts/Settlement.sol:Settlement",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12782,
        "contract": "contracts/Settlement.sol:Settlement",
        "label": "_limitOrderProtocol",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12785,
        "contract": "contracts/Settlement.sol:Settlement",
        "label": "_checked",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10015,
        "contract": "contracts/Settlement.sol:Settlement",
        "label": "feeBank",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10019,
        "contract": "contracts/Settlement.sol:Settlement",
        "label": "creditAllowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}