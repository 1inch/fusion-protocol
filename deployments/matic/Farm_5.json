{
  "address": "0x0A7dc9fE4F8a45C783bab0C137884caf34e4BF1F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Pods",
          "name": "farmableToken_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "rewardsToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CheckpointBeforeStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DurationTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameDistributor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroFarmableTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroRewardsTokenAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDistributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDistributor",
          "type": "address"
        }
      ],
      "name": "DistributorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmableToken",
      "outputs": [
        {
          "internalType": "contract IERC20Pods",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "farmed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFarmInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "finished",
              "type": "uint40"
            },
            {
              "internalType": "uint32",
              "name": "duration",
              "type": "uint32"
            },
            {
              "internalType": "uint184",
              "name": "reward",
              "type": "uint184"
            }
          ],
          "internalType": "struct FarmAccounting.Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "distributor_",
          "type": "address"
        }
      ],
      "name": "setDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "startFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x61b54cf219a24164b300ee484f3234410a16e058c2e500cfd587fe07714a3a32",
  "receipt": {
    "to": null,
    "from": "0xa3879f8CA20664F9BE5e4B032032a4416A0a446e",
    "contractAddress": "0x0A7dc9fE4F8a45C783bab0C137884caf34e4BF1F",
    "transactionIndex": 40,
    "gasUsed": "1610044",
    "logsBloom": "0x
    "blockHash": "0x1301c1fb4e65aaad579ffac87f9ddc56c28bb0d2e7d079557e52bc1f3c399206",
    "transactionHash": "0x61b54cf219a24164b300ee484f3234410a16e058c2e500cfd587fe07714a3a32",
    "logs": [
      {
        "transactionIndex": 40,
        "blockNumber": 36534680,
        "transactionHash": "0x61b54cf219a24164b300ee484f3234410a16e058c2e500cfd587fe07714a3a32",
        "address": "0x0A7dc9fE4F8a45C783bab0C137884caf34e4BF1F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a3879f8ca20664f9be5e4b032032a4416a0a446e"
        ],
        "data": "0x",
        "logIndex": 157,
        "blockHash": "0x1301c1fb4e65aaad579ffac87f9ddc56c28bb0d2e7d079557e52bc1f3c399206"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 36534680,
        "transactionHash": "0x61b54cf219a24164b300ee484f3234410a16e058c2e500cfd587fe07714a3a32",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a3879f8ca20664f9be5e4b032032a4416a0a446e",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000ab9bf1db434d40000000000000000000000000000000000000000000000003c59a7f45c19845360000000000000000000000000000000000000000000000d9d14ead72f998f0e1000000000000000000000000000000000000000000000003c4eee353e654f7f60000000000000000000000000000000000000000000000d9d1fa4964d4dc3e21",
        "logIndex": 158,
        "blockHash": "0x1301c1fb4e65aaad579ffac87f9ddc56c28bb0d2e7d079557e52bc1f3c399206"
      }
    ],
    "blockNumber": 36534680,
    "cumulativeGasUsed": "8431735",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xac99a675d8Ec24FbaeFc4A4f64d8b9ee3b2c7C3e",
    "0xABDdf13D8f984646bf7108ac77c6Ce6FFfA3Bd6F"
  ],
  "numDeployments": 1,
  "solcInputHash": "f189a4c1fcfa564bf340fec5a2399bed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Pods\",\"name\":\"farmableToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardsToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CheckpointBeforeStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameDistributor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroFarmableTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRewardsTokenAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"DistributorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmableToken\",\"outputs\":[{\"internalType\":\"contract IERC20Pods\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"farmed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFarmInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"finished\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint184\",\"name\":\"reward\",\"type\":\"uint184\"}],\"internalType\":\"struct FarmAccounting.Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor_\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@1inch/farming/contracts/FarmingPod.sol\":\"FarmingPod\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@1inch/erc20-pods/contracts/Pod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IPod.sol\\\";\\n\\nabstract contract Pod is IPod {\\n    error AccessDenied();\\n\\n    address public immutable token;\\n\\n    modifier onlyToken {\\n        if (msg.sender != token) revert AccessDenied();\\n        _;\\n    }\\n\\n    constructor(address token_) {\\n        token = token_;\\n    }\\n}\\n\",\"keccak256\":\"0x8b19c0a4884cfeed5c798cee6fc01f537b896983e9207fcb1a3173687fe2dd60\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/interfaces/IERC20Pods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Pods is IERC20 {\\n    function hasPod(address account, address pod) external view returns(bool);\\n    function podsCount(address account) external view returns(uint256);\\n    function podAt(address account, uint256 index) external view returns(address);\\n    function pods(address account) external view returns(address[] memory);\\n    function podBalanceOf(address pod, address account) external view returns(uint256);\\n\\n    function addPod(address pod) external;\\n    function removePod(address pod) external;\\n    function removeAllPods() external;\\n}\\n\",\"keccak256\":\"0x46a4407d34b86181a3635a67c3b8aaccb5ed7b95c7ee0444802d050d2f7d920a\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/interfaces/IPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPod {\\n    function updateBalances(address from, address to, uint256 amount) external; // onlyERC20Pods\\n}\\n\",\"keccak256\":\"0xb9c87816587a706f6b6d0b08ab12ea1197d86b3cbe2efa0ce8a8644a72f4d9d7\",\"license\":\"MIT\"},\"@1inch/farming/contracts/FarmingLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./accounting/FarmAccounting.sol\\\";\\nimport \\\"./accounting/UserAccounting.sol\\\";\\n\\nlibrary FarmingLib {\\n    using FarmAccounting for FarmAccounting.Info;\\n    using UserAccounting for UserAccounting.Info;\\n    using FarmingLib for FarmingLib.Info;\\n\\n    struct Data {\\n        FarmAccounting.Info farmInfo;\\n        UserAccounting.Info userInfo;\\n    }\\n\\n    struct Info {\\n        function() internal view returns(uint256) getTotalSupply;\\n        bytes32 dataSlot;\\n    }\\n\\n    function makeInfo(function() internal view returns(uint256) getTotalSupply, Data storage data) internal pure returns(Info memory info) {\\n        info.getTotalSupply = getTotalSupply;\\n        bytes32 dataSlot;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            dataSlot := data.slot\\n        }\\n        info.dataSlot = dataSlot;\\n    }\\n\\n    function getData(Info memory self) internal pure returns(Data storage data) {\\n        bytes32 dataSlot = self.dataSlot;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            data.slot := dataSlot\\n        }\\n    }\\n\\n    function startFarming(Info memory self, uint256 amount, uint256 period) internal returns(uint256 reward) {\\n        Data storage data = self.getData();\\n        data.userInfo.updateFarmedPerToken(_farmedPerToken(self));\\n        reward = data.farmInfo.startFarming(amount, period);\\n    }\\n\\n    function farmed(Info memory self, address account, uint256 balance) internal view returns(uint256) {\\n        return self.getData().userInfo.farmed(account, balance, _farmedPerToken(self));\\n    }\\n\\n    function claim(Info memory self, address account, uint256 balance) internal returns(uint256 amount) {\\n        Data storage data = self.getData();\\n        uint256 fpt = _farmedPerToken(self);\\n        amount = data.userInfo.farmed(account, balance, fpt);\\n        if (amount > 0) {\\n            data.userInfo.eraseFarmed(account, balance, fpt);\\n        }\\n    }\\n\\n    function updateBalances(Info memory self, address from, address to, uint256 amount) internal {\\n        self.getData().userInfo.updateBalances(from, to, amount, _farmedPerToken(self));\\n    }\\n\\n    function _farmedPerToken(Info memory self) private view returns (uint256) {\\n        return self.getData().userInfo.farmedPerToken(_infoToContext(self), _lazyGetSupply, _lazyGetFarmed);\\n    }\\n\\n    // UserAccounting bindings\\n\\n    function _lazyGetSupply(bytes32 context) private view returns(uint256) {\\n        Info memory self = _contextToInfo(context);\\n        return self.getTotalSupply();\\n    }\\n\\n    function _lazyGetFarmed(bytes32 context, uint256 checkpoint) private view returns(uint256) {\\n        Info memory self = _contextToInfo(context);\\n        return self.getData().farmInfo.farmedSinceCheckpointScaled(checkpoint);\\n    }\\n\\n    function _contextToInfo(bytes32 context) private pure returns(Info memory self) {\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            self := context\\n        }\\n    }\\n\\n    function _infoToContext(Info memory self) private pure returns(bytes32 context) {\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            context := self\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca1f78161c2b5827e76d22534b1dbfc356c5c82e8d8ed5572af3f2aa5b8552c1\",\"license\":\"MIT\"},\"@1inch/farming/contracts/FarmingPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/Pod.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/interfaces/IERC20Pods.sol\\\";\\n\\nimport \\\"./interfaces/IFarmingPod.sol\\\";\\nimport \\\"./FarmingLib.sol\\\";\\n\\ncontract FarmingPod is Pod, IFarmingPod, Ownable {\\n    using SafeERC20 for IERC20;\\n    using FarmingLib for FarmingLib.Info;\\n    using Address for address payable;\\n\\n    error ZeroFarmableTokenAddress();\\n    error ZeroRewardsTokenAddress();\\n    error SameDistributor();\\n\\n    IERC20Pods public immutable farmableToken;\\n    IERC20 public immutable rewardsToken;\\n\\n    address public distributor;\\n    uint256 private _totalSupply;\\n    FarmingLib.Data private _farm;\\n\\n    modifier onlyDistributor {\\n        if (msg.sender != distributor) revert AccessDenied();\\n        _;\\n    }\\n\\n    constructor(IERC20Pods farmableToken_, IERC20 rewardsToken_)\\n        Pod(address(farmableToken_))\\n    {\\n        if (address(farmableToken_) == address(0)) revert ZeroFarmableTokenAddress();\\n        if (address(rewardsToken_) == address(0)) revert ZeroRewardsTokenAddress();\\n        farmableToken = farmableToken_;\\n        rewardsToken = rewardsToken_;\\n    }\\n\\n    function totalSupply() public view returns(uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function getFarmInfo() external view returns(FarmAccounting.Info memory) {\\n        return _farm.farmInfo;\\n    }\\n\\n    function setDistributor(address distributor_) external onlyOwner {\\n        address oldDistributor = distributor;\\n        if (distributor_ == oldDistributor) revert SameDistributor();\\n        emit DistributorChanged(oldDistributor, distributor_);\\n        distributor = distributor_;\\n    }\\n\\n    function startFarming(uint256 amount, uint256 period) external onlyDistributor {\\n        rewardsToken.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 reward = _farmInfo().startFarming(amount, period);\\n        emit RewardAdded(reward, period);\\n    }\\n\\n    function farmed(address account) public view returns(uint256) {\\n        uint256 balance = farmableToken.podBalanceOf(address(this), account);\\n        return _farmInfo().farmed(account, balance);\\n    }\\n\\n    function claim() external {\\n        uint256 podBalance = farmableToken.podBalanceOf(address(this), msg.sender);\\n        uint256 amount = _farmInfo().claim(msg.sender, podBalance);\\n        if (amount > 0) {\\n            rewardsToken.safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    function updateBalances(address from, address to, uint256 amount) external onlyToken {\\n        _farmInfo().updateBalances(from, to, amount);\\n        if (from == address(0)) {\\n            _totalSupply += amount;\\n        }\\n        if (to == address(0)) {\\n            _totalSupply -= amount;\\n        }\\n    }\\n\\n    function rescueFunds(IERC20 token, uint256 amount) external onlyDistributor {\\n        if(token == IERC20(address(0))) {\\n            payable(distributor).sendValue(amount);\\n        } else {\\n            token.safeTransfer(distributor, amount);\\n        }\\n    }\\n\\n    function _farmInfo() internal view returns(FarmingLib.Info memory) {\\n        return FarmingLib.makeInfo(totalSupply, _farm);\\n    }\\n}\\n\",\"keccak256\":\"0x3b7027f211cf83909c4a75e1a8e6980cffb7fde0ac1f9a37f7a19f65e7fa69db\",\"license\":\"MIT\"},\"@1inch/farming/contracts/accounting/FarmAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary FarmAccounting {\\n    error CheckpointBeforeStarted();\\n    error ZeroDuration();\\n    error DurationTooLarge();\\n    error AmountTooLarge();\\n\\n    struct Info {\\n        uint40 finished;\\n        uint32 duration;\\n        uint184 reward;\\n    }\\n\\n    uint256 constant internal _MAX_REWARD_AMOUNT = 1e42;\\n    uint256 constant internal _SCALE = 1e18;\\n\\n    /// @dev Requires extra 18 decimals for precision, result should not exceed 10**54\\n    function farmedSinceCheckpointScaled(Info memory info, uint256 checkpoint) internal view returns(uint256 amount) {\\n        if (checkpoint < info.finished - info.duration) revert CheckpointBeforeStarted();\\n        if (info.duration > 0) {\\n            uint256 elapsed = Math.min(block.timestamp, info.finished) - Math.min(checkpoint, info.finished);\\n            return elapsed * info.reward * _SCALE / info.duration;\\n        }\\n    }\\n\\n    function startFarming(Info storage info, uint256 amount, uint256 period) internal returns(uint256) {\\n        if (period == 0) revert ZeroDuration();\\n        if (period > type(uint32).max) revert DurationTooLarge();\\n        if (amount > _MAX_REWARD_AMOUNT) revert AmountTooLarge();\\n\\n        // If something left from prev farming add it to the new farming\\n        Info memory prev = info;\\n        if (block.timestamp < prev.finished) {\\n            amount += prev.reward - farmedSinceCheckpointScaled(prev, prev.finished - prev.duration) / _SCALE;\\n        }\\n\\n        (info.finished, info.duration, info.reward) = (uint40(block.timestamp + period), uint32(period), uint184(amount));\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2a409ba492afc1f671138dc66bd3b89228b66245c24b23f89cced58ba3979c28\",\"license\":\"MIT\"},\"@1inch/farming/contracts/accounting/UserAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary UserAccounting {\\n    struct Info {\\n        uint40 checkpoint;\\n        uint216 farmedPerTokenStored;\\n        mapping(address => int256) corrections;\\n    }\\n\\n    uint256 constant internal _SCALE = 1e18;\\n\\n    function farmedPerToken(\\n        Info storage info,\\n        bytes32 context,\\n        function(bytes32) internal view returns(uint256) lazyGetSupply,\\n        function(bytes32, uint256) internal view returns(uint256) lazyGetFarmed\\n    ) internal view returns(uint256) {\\n        (uint256 checkpoint, uint256 fpt) = (info.checkpoint, info.farmedPerTokenStored);\\n        if (block.timestamp != checkpoint) {\\n            uint256 supply = lazyGetSupply(context);\\n            if (supply > 0) {\\n                uint256 changePerToken;\\n                unchecked { changePerToken = lazyGetFarmed(context, checkpoint) / supply; }\\n                fpt += changePerToken;\\n            }\\n        }\\n        return fpt;\\n    }\\n\\n    function farmed(Info storage info, address account, uint256 balance, uint256 fpt) internal view returns(uint256) {\\n        return uint256(int256(balance * fpt) - info.corrections[account]) / _SCALE;\\n    }\\n\\n    function eraseFarmed(Info storage info, address account, uint256 balance, uint256 fpt) internal {\\n        info.corrections[account] = int256(balance * fpt);\\n    }\\n\\n    function updateFarmedPerToken(Info storage info, uint256 fpt) internal {\\n        (info.checkpoint, info.farmedPerTokenStored) = (uint40(block.timestamp), uint216(fpt));\\n    }\\n\\n    function updateBalances(Info storage info, address from, address to, uint256 amount, uint256 fpt) internal {\\n        bool fromZero = (from == address(0));\\n        bool toZero = (to == address(0));\\n        if (amount > 0 && from != to) {\\n            if (fromZero || toZero) {\\n                updateFarmedPerToken(info, fpt);\\n            }\\n\\n            int256 diff = int256(amount * fpt);\\n            if (!fromZero) {\\n                info.corrections[from] -= diff;\\n            }\\n            if (!toZero) {\\n                info.corrections[to] += diff;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3cd0867f5fc15578b21e6bf87ae77cc0d8d9a9e00d2861ea7b9a13ff1c40403\",\"license\":\"MIT\"},\"@1inch/farming/contracts/interfaces/IFarmingPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@1inch/erc20-pods/contracts/interfaces/IPod.sol\\\";\\n\\ninterface IFarmingPod is IPod {\\n    event DistributorChanged(address oldDistributor, address newDistributor);\\n    event RewardAdded(uint256 reward, uint256 duration);\\n\\n    function farmed(address account) external view returns(uint256);\\n    function claim() external;\\n\\n    // only owner functions\\n    function setDistributor(address distributor_) external;\\n\\n    // only distributor functions\\n    function startFarming(uint256 amount, uint256 period) external;\\n}\\n\",\"keccak256\":\"0x6367b6b36f8e0a5f260fd8782e83e75a32153ca560471d035763e006dc460598\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001d8638038062001d8683398101604081905262000034916200011d565b6001600160a01b0382166080526200004c33620000b4565b6001600160a01b038216620000745760405163d0af4eb760e01b815260040160405180910390fd5b6001600160a01b0381166200009c576040516330c1035b60e21b815260040160405180910390fd5b6001600160a01b0391821660a0521660c0526200015c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200011a57600080fd5b50565b600080604083850312156200013157600080fd5b82516200013e8162000104565b6020840151909250620001518162000104565b809150509250929050565b60805160a05160c051611bd7620001af600039600081816102d50152818161054e01526105e40152600081816101da01528181610387015261046d01526000818161030f01526108630152611bd76000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806375619ab511610097578063bfe1092811610066578063bfe10928146102b0578063d1af0c7d146102d0578063f2fde38b146102f7578063fc0c546a1461030a57600080fd5b806375619ab51461025957806378e3214f1461026c5780637a1f1aa91461027f5780638da5cb5b1461029257600080fd5b80634216f972116100d35780634216f972146102215780634e71d92d14610234578063702612221461023e578063715018a61461025157600080fd5b806309434f28146100fa57806318160ddd146101c357806340282e99146101d5575b600080fd5b6101766040805160608101825260008082526020820181905291810191909152506040805160608101825260035464ffffffffff8116825265010000000000810463ffffffff1660208301526901000000000000000000900476ffffffffffffffffffffffffffffffffffffffffffffff169181019190915290565b60408051825164ffffffffff16815260208084015163ffffffff16908201529181015176ffffffffffffffffffffffffffffffffffffffffffffff16908201526060015b60405180910390f35b6002545b6040519081526020016101ba565b6101fc7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ba565b6101c761022f3660046118b7565b610337565b61023c610436565b005b61023c61024c3660046118d4565b610579565b61023c61068a565b61023c6102673660046118b7565b61069e565b61023c61027a3660046118f6565b610795565b61023c61028d366004611922565b61084b565b60005473ffffffffffffffffffffffffffffffffffffffff166101fc565b6001546101fc9073ffffffffffffffffffffffffffffffffffffffff1681565b6101fc7f000000000000000000000000000000000000000000000000000000000000000081565b61023c6103053660046118b7565b610962565b6101fc7f000000000000000000000000000000000000000000000000000000000000000081565b60025490565b6040517f3466a88600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff828116602483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690633466a88690604401602060405180830381865afa1580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f29190611963565b905061042f838261042860408051808201825261188d815260006020918201528151808301909252610331825260039082015290565b9190610a1e565b9392505050565b6040517f3466a8860000000000000000000000000000000000000000000000000000000081523060048201523360248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633466a88690604401602060405180830381865afa1580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed9190611963565b9050600061052c338361052560408051808201825261188d815260006020918201528151808301909252610331825260039082015290565b9190610a46565b905080156105755761057573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163383610a92565b5050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105ca576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61060c73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333085610b66565b6000610649838361064260408051808201825261188d815260006020918201528151808301909252610331825260039082015290565b9190610bca565b60408051828152602081018590529192507f6c07ee05dcf262f13abf9d87b846ee789d2f90fe991d495acd7d7fc109ee1f55910160405180910390a1505050565b610692610c55565b61069c6000610cd6565b565b6106a6610c55565b60015473ffffffffffffffffffffffffffffffffffffffff9081169082168190036106fd576040517f8750ee9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8084168252841660208201527fa9f739537fc57540bed0a44e33e27baa63290d865cc15f0f16cf17d38c998a4d910160405180910390a150600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107e6576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610824576001546105759073ffffffffffffffffffffffffffffffffffffffff1682610d4b565b6001546105759073ffffffffffffffffffffffffffffffffffffffff848116911683610a92565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108ba576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108f78383836108ef60408051808201825261188d815260006020918201528151808301909252610331825260039082015290565b929190610ea5565b73ffffffffffffffffffffffffffffffffffffffff831661092a57806002600082825461092491906119ab565b90915550505b73ffffffffffffffffffffffffffffffffffffffff821661095d57806002600082825461095791906119be565b90915550505b505050565b61096a610c55565b73ffffffffffffffffffffffffffffffffffffffff8116610a12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610a1b81610cd6565b50565b6000610a3e8383610a2e87610ec5565b6020880151600101929190610eed565b949350505050565b600080610a54856020015190565b90506000610a6186610ec5565b9050610a7260018301868684610eed565b92508215610a8957610a8960018301868684610f3d565b50509392505050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261095d9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f76565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610bc49085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610ae4565b50505050565b600080610bd8856020015190565b9050610c41610be686610ec5565b600183019064ffffffffff42167affffffffffffffffffffffffffffffffffffffffffffffffffffff90911665010000000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000016179055565b610c4c818585611082565b95945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461069c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a09565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80471015610db5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610a09565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610e0f576040519150601f19603f3d011682016040523d82523d6000602084013e610e14565b606091505b505090508061095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610a09565b610bc4838383610eb488610ec5565b6020890151600101939291906112c2565b6000610ee78261141e611451610edc866020015190565b6001019291906114e6565b92915050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600185016020526040812054670de0b6b3a764000090610f2984866119d1565b610f3391906119e8565b610c4c9190611a3e565b610f4781836119d1565b73ffffffffffffffffffffffffffffffffffffffff909316600090815260019094016020525050604090912055565b6000610fd8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115739092919063ffffffff16565b80519091501561095d5780806020019051810190610ff69190611a79565b61095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a09565b6000816000036110be576040517f68d5686e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff8211156110fc576040517f426a107300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b710b7abc627050305adf14a3d9e40000000000831115611148576040517f0625040100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051606081018252855464ffffffffff811680835265010000000000820463ffffffff166020840152690100000000000000000090910476ffffffffffffffffffffffffffffffffffffffffffffff16928201929092529042101561121b57670de0b6b3a76400006111dc82836020015163ffffffff1684600001516111d09190611a9b565b64ffffffffff16611582565b6111e69190611a3e565b816040015176ffffffffffffffffffffffffffffffffffffffffffffff1661120e91906119be565b61121890856119ab565b93505b61122583426119ab565b855464ffffffffff908116690100000000000000000076ffffffffffffffffffffffffffffffffffffffffffffff8816027fffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffff16176501000000000063ffffffff9690961695909502949094177fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001693169290921790935550919050565b73ffffffffffffffffffffffffffffffffffffffff8481161590841615831580159061131a57508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b156114155781806113285750805b15611381577fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000650100000000007affffffffffffffffffffffffffffffffffffffffffffffffffffff851602164264ffffffffff161787555b600061138d84866119d1565b9050826113d15773ffffffffffffffffffffffffffffffffffffffff87166000908152600189016020526040812080548392906113cb9084906119e8565b90915550505b816114135773ffffffffffffffffffffffffffffffffffffffff861660009081526001890160205260408120805483929061140d908490611ab9565b90915550505b505b50505050505050565b60008061143f836040805180820190915261188d8152600060208201525090565b905061042f816000015163ffffffff16565b600080611472846040805180820190915261188d8152600060208201525090565b9050610a3e83611483836020015190565b60408051606081018252915464ffffffffff8116835265010000000000810463ffffffff9081166020850152690100000000000000000090910476ffffffffffffffffffffffffffffffffffffffffffffff169183019190915290919061158216565b835460009064ffffffffff8116906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16428214611569576000611530878763ffffffff16565b905080156115675760008161154989868963ffffffff16565b8161155657611556611a0f565b04905061156381846119ab565b9250505b505b9695505050505050565b6060610a3e848460008561167f565b6000826020015163ffffffff16836000015161159e9190611a9b565b64ffffffffff168210156115de576040517f92f7283100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602083015163ffffffff1615610ee757600061160583856000015164ffffffffff16611798565b61161a42866000015164ffffffffff16611798565b61162491906119be565b9050836020015163ffffffff16670de0b6b3a7640000856040015176ffffffffffffffffffffffffffffffffffffffffffffff168361166391906119d1565b61166d91906119d1565b6116779190611a3e565b915050610ee7565b606082471015611711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a09565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161173a9190611b05565b60006040518083038185875af1925050503d8060008114611777576040519150601f19603f3d011682016040523d82523d6000602084013e61177c565b606091505b509150915061178d878383876117ae565b979650505050505050565b60008183106117a7578161042f565b5090919050565b6060831561184457825160000361183d5773ffffffffffffffffffffffffffffffffffffffff85163b61183d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a09565b5081610a3e565b610a3e83838151156118595781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a099190611b21565b61069c611b72565b73ffffffffffffffffffffffffffffffffffffffff81168114610a1b57600080fd5b6000602082840312156118c957600080fd5b813561042f81611895565b600080604083850312156118e757600080fd5b50508035926020909101359150565b6000806040838503121561190957600080fd5b823561191481611895565b946020939093013593505050565b60008060006060848603121561193757600080fd5b833561194281611895565b9250602084013561195281611895565b929592945050506040919091013590565b60006020828403121561197557600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610ee757610ee761197c565b81810381811115610ee757610ee761197c565b8082028115828204841417610ee757610ee761197c565b8181036000831280158383131683831282161715611a0857611a0861197c565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611a74577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215611a8b57600080fd5b8151801515811461042f57600080fd5b64ffffffffff828116828216039080821115611a0857611a0861197c565b8082018281126000831280158216821582161715611ad957611ad961197c565b505092915050565b60005b83811015611afc578181015183820152602001611ae4565b50506000910152565b60008251611b17818460208701611ae1565b9190910192915050565b6020815260008251806020840152611b40816040850160208701611ae1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220c3d078467cc61a409f575920403c196a890d3a9812f881a465ba39f40f1e205264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806375619ab511610097578063bfe1092811610066578063bfe10928146102b0578063d1af0c7d146102d0578063f2fde38b146102f7578063fc0c546a1461030a57600080fd5b806375619ab51461025957806378e3214f1461026c5780637a1f1aa91461027f5780638da5cb5b1461029257600080fd5b80634216f972116100d35780634216f972146102215780634e71d92d14610234578063702612221461023e578063715018a61461025157600080fd5b806309434f28146100fa57806318160ddd146101c357806340282e99146101d5575b600080fd5b6101766040805160608101825260008082526020820181905291810191909152506040805160608101825260035464ffffffffff8116825265010000000000810463ffffffff1660208301526901000000000000000000900476ffffffffffffffffffffffffffffffffffffffffffffff169181019190915290565b60408051825164ffffffffff16815260208084015163ffffffff16908201529181015176ffffffffffffffffffffffffffffffffffffffffffffff16908201526060015b60405180910390f35b6002545b6040519081526020016101ba565b6101fc7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ba565b6101c761022f3660046118b7565b610337565b61023c610436565b005b61023c61024c3660046118d4565b610579565b61023c61068a565b61023c6102673660046118b7565b61069e565b61023c61027a3660046118f6565b610795565b61023c61028d366004611922565b61084b565b60005473ffffffffffffffffffffffffffffffffffffffff166101fc565b6001546101fc9073ffffffffffffffffffffffffffffffffffffffff1681565b6101fc7f000000000000000000000000000000000000000000000000000000000000000081565b61023c6103053660046118b7565b610962565b6101fc7f000000000000000000000000000000000000000000000000000000000000000081565b60025490565b6040517f3466a88600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff828116602483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690633466a88690604401602060405180830381865afa1580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f29190611963565b905061042f838261042860408051808201825261188d815260006020918201528151808301909252610331825260039082015290565b9190610a1e565b9392505050565b6040517f3466a8860000000000000000000000000000000000000000000000000000000081523060048201523360248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633466a88690604401602060405180830381865afa1580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed9190611963565b9050600061052c338361052560408051808201825261188d815260006020918201528151808301909252610331825260039082015290565b9190610a46565b905080156105755761057573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163383610a92565b5050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105ca576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61060c73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333085610b66565b6000610649838361064260408051808201825261188d815260006020918201528151808301909252610331825260039082015290565b9190610bca565b60408051828152602081018590529192507f6c07ee05dcf262f13abf9d87b846ee789d2f90fe991d495acd7d7fc109ee1f55910160405180910390a1505050565b610692610c55565b61069c6000610cd6565b565b6106a6610c55565b60015473ffffffffffffffffffffffffffffffffffffffff9081169082168190036106fd576040517f8750ee9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8084168252841660208201527fa9f739537fc57540bed0a44e33e27baa63290d865cc15f0f16cf17d38c998a4d910160405180910390a150600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107e6576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610824576001546105759073ffffffffffffffffffffffffffffffffffffffff1682610d4b565b6001546105759073ffffffffffffffffffffffffffffffffffffffff848116911683610a92565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108ba576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108f78383836108ef60408051808201825261188d815260006020918201528151808301909252610331825260039082015290565b929190610ea5565b73ffffffffffffffffffffffffffffffffffffffff831661092a57806002600082825461092491906119ab565b90915550505b73ffffffffffffffffffffffffffffffffffffffff821661095d57806002600082825461095791906119be565b90915550505b505050565b61096a610c55565b73ffffffffffffffffffffffffffffffffffffffff8116610a12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610a1b81610cd6565b50565b6000610a3e8383610a2e87610ec5565b6020880151600101929190610eed565b949350505050565b600080610a54856020015190565b90506000610a6186610ec5565b9050610a7260018301868684610eed565b92508215610a8957610a8960018301868684610f3d565b50509392505050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261095d9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f76565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610bc49085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610ae4565b50505050565b600080610bd8856020015190565b9050610c41610be686610ec5565b600183019064ffffffffff42167affffffffffffffffffffffffffffffffffffffffffffffffffffff90911665010000000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000016179055565b610c4c818585611082565b95945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461069c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a09565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80471015610db5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610a09565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610e0f576040519150601f19603f3d011682016040523d82523d6000602084013e610e14565b606091505b505090508061095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610a09565b610bc4838383610eb488610ec5565b6020890151600101939291906112c2565b6000610ee78261141e611451610edc866020015190565b6001019291906114e6565b92915050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600185016020526040812054670de0b6b3a764000090610f2984866119d1565b610f3391906119e8565b610c4c9190611a3e565b610f4781836119d1565b73ffffffffffffffffffffffffffffffffffffffff909316600090815260019094016020525050604090912055565b6000610fd8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115739092919063ffffffff16565b80519091501561095d5780806020019051810190610ff69190611a79565b61095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a09565b6000816000036110be576040517f68d5686e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff8211156110fc576040517f426a107300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b710b7abc627050305adf14a3d9e40000000000831115611148576040517f0625040100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051606081018252855464ffffffffff811680835265010000000000820463ffffffff166020840152690100000000000000000090910476ffffffffffffffffffffffffffffffffffffffffffffff16928201929092529042101561121b57670de0b6b3a76400006111dc82836020015163ffffffff1684600001516111d09190611a9b565b64ffffffffff16611582565b6111e69190611a3e565b816040015176ffffffffffffffffffffffffffffffffffffffffffffff1661120e91906119be565b61121890856119ab565b93505b61122583426119ab565b855464ffffffffff908116690100000000000000000076ffffffffffffffffffffffffffffffffffffffffffffff8816027fffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffff16176501000000000063ffffffff9690961695909502949094177fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001693169290921790935550919050565b73ffffffffffffffffffffffffffffffffffffffff8481161590841615831580159061131a57508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b156114155781806113285750805b15611381577fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000650100000000007affffffffffffffffffffffffffffffffffffffffffffffffffffff851602164264ffffffffff161787555b600061138d84866119d1565b9050826113d15773ffffffffffffffffffffffffffffffffffffffff87166000908152600189016020526040812080548392906113cb9084906119e8565b90915550505b816114135773ffffffffffffffffffffffffffffffffffffffff861660009081526001890160205260408120805483929061140d908490611ab9565b90915550505b505b50505050505050565b60008061143f836040805180820190915261188d8152600060208201525090565b905061042f816000015163ffffffff16565b600080611472846040805180820190915261188d8152600060208201525090565b9050610a3e83611483836020015190565b60408051606081018252915464ffffffffff8116835265010000000000810463ffffffff9081166020850152690100000000000000000090910476ffffffffffffffffffffffffffffffffffffffffffffff169183019190915290919061158216565b835460009064ffffffffff8116906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16428214611569576000611530878763ffffffff16565b905080156115675760008161154989868963ffffffff16565b8161155657611556611a0f565b04905061156381846119ab565b9250505b505b9695505050505050565b6060610a3e848460008561167f565b6000826020015163ffffffff16836000015161159e9190611a9b565b64ffffffffff168210156115de576040517f92f7283100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602083015163ffffffff1615610ee757600061160583856000015164ffffffffff16611798565b61161a42866000015164ffffffffff16611798565b61162491906119be565b9050836020015163ffffffff16670de0b6b3a7640000856040015176ffffffffffffffffffffffffffffffffffffffffffffff168361166391906119d1565b61166d91906119d1565b6116779190611a3e565b915050610ee7565b606082471015611711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a09565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161173a9190611b05565b60006040518083038185875af1925050503d8060008114611777576040519150601f19603f3d011682016040523d82523d6000602084013e61177c565b606091505b509150915061178d878383876117ae565b979650505050505050565b60008183106117a7578161042f565b5090919050565b6060831561184457825160000361183d5773ffffffffffffffffffffffffffffffffffffffff85163b61183d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a09565b5081610a3e565b610a3e83838151156118595781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a099190611b21565b61069c611b72565b73ffffffffffffffffffffffffffffffffffffffff81168114610a1b57600080fd5b6000602082840312156118c957600080fd5b813561042f81611895565b600080604083850312156118e757600080fd5b50508035926020909101359150565b6000806040838503121561190957600080fd5b823561191481611895565b946020939093013593505050565b60008060006060848603121561193757600080fd5b833561194281611895565b9250602084013561195281611895565b929592945050506040919091013590565b60006020828403121561197557600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610ee757610ee761197c565b81810381811115610ee757610ee761197c565b8082028115828204841417610ee757610ee761197c565b8181036000831280158383131683831282161715611a0857611a0861197c565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611a74577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215611a8b57600080fd5b8151801515811461042f57600080fd5b64ffffffffff828116828216039080821115611a0857611a0861197c565b8082018281126000831280158216821582161715611ad957611ad961197c565b505092915050565b60005b83811015611afc578181015183820152602001611ae4565b50506000910152565b60008251611b17818460208701611ae1565b9190910192915050565b6020815260008251806020840152611b40816040850160208701611ae1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220c3d078467cc61a409f575920403c196a890d3a9812f881a465ba39f40f1e205264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8309,
        "contract": "@1inch/farming/contracts/FarmingPod.sol:FarmingPod",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2139,
        "contract": "@1inch/farming/contracts/FarmingPod.sol:FarmingPod",
        "label": "distributor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2141,
        "contract": "@1inch/farming/contracts/FarmingPod.sol:FarmingPod",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2144,
        "contract": "@1inch/farming/contracts/FarmingPod.sol:FarmingPod",
        "label": "_farm",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Data)1814_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_struct(Data)1814_storage": {
        "encoding": "inplace",
        "label": "struct FarmingLib.Data",
        "members": [
          {
            "astId": 1810,
            "contract": "@1inch/farming/contracts/FarmingPod.sol:FarmingPod",
            "label": "farmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Info)2466_storage"
          },
          {
            "astId": 1813,
            "contract": "@1inch/farming/contracts/FarmingPod.sol:FarmingPod",
            "label": "userInfo",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Info)2634_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Info)2466_storage": {
        "encoding": "inplace",
        "label": "struct FarmAccounting.Info",
        "members": [
          {
            "astId": 2461,
            "contract": "@1inch/farming/contracts/FarmingPod.sol:FarmingPod",
            "label": "finished",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2463,
            "contract": "@1inch/farming/contracts/FarmingPod.sol:FarmingPod",
            "label": "duration",
            "offset": 5,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2465,
            "contract": "@1inch/farming/contracts/FarmingPod.sol:FarmingPod",
            "label": "reward",
            "offset": 9,
            "slot": "0",
            "type": "t_uint184"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Info)2634_storage": {
        "encoding": "inplace",
        "label": "struct UserAccounting.Info",
        "members": [
          {
            "astId": 2627,
            "contract": "@1inch/farming/contracts/FarmingPod.sol:FarmingPod",
            "label": "checkpoint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2629,
            "contract": "@1inch/farming/contracts/FarmingPod.sol:FarmingPod",
            "label": "farmedPerTokenStored",
            "offset": 5,
            "slot": "0",
            "type": "t_uint216"
          },
          {
            "astId": 2633,
            "contract": "@1inch/farming/contracts/FarmingPod.sol:FarmingPod",
            "label": "corrections",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_int256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint184": {
        "encoding": "inplace",
        "label": "uint184",
        "numberOfBytes": "23"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}